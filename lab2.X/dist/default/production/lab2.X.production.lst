

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon May 24 15:45:49 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=3
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.20
    43                           ; Generated 12/02/2020 GMT
    44                           ; 
    45                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F877A Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196                           
   197                           	psect	strings
   198  0003                     __pstrings:
   199  0003                     stringtab:
   200  0003                     __stringtab:
   201                           
   202                           ;	String table - string pointers are 1 byte each
   203  0003  1BFF               	btfsc	btemp+1,7
   204  0004  280D               	ljmp	stringcode
   205  0005  1383               	bcf	3,7
   206  0006  187F               	btfsc	btemp+1,0
   207  0007  1783               	bsf	3,7
   208  0008  0800               	movf	0,w
   209  0009  0A84               	incf	4,f
   210  000A  1903               	skipnz
   211  000B  0AFF               	incf	btemp+1,f
   212  000C  0008               	return
   213  000D                     stringcode:
   214  000D                     stringdir:
   215  000D  3000               	movlw	high stringdir
   216  000E  008A               	movwf	10
   217  000F  0804               	movf	4,w
   218  0010  0A84               	incf	4,f
   219  0011  0782               	addwf	2,f
   220  0012                     __stringbase:
   221  0012  3400               	retlw	0
   222  0013                     __end_of__stringtab:
   223  0013                     _dpowers:
   224  0013  3401               	retlw	1
   225  0014  3400               	retlw	0
   226  0015  340A               	retlw	10
   227  0016  3400               	retlw	0
   228  0017  3464               	retlw	100
   229  0018  3400               	retlw	0
   230  0019  34E8               	retlw	232
   231  001A  3403               	retlw	3
   232  001B  3410               	retlw	16
   233  001C  3427               	retlw	39
   234  001D                     __end_of_dpowers:
   235  001E                     _ADRESH	set	30
   236  001F                     _ADCON0bits	set	31
   237  001F                     _ADCON0	set	31
   238  0008                     _PORTDbits	set	8
   239  0007                     _PORTCbits	set	7
   240  001A                     _RCREG	set	26
   241  0006                     _PORTBbits	set	6
   242  0019                     _TXREG	set	25
   243  0018                     _RCSTAbits	set	24
   244  0018                     _RCSTA	set	24
   245  00FA                     _GO	set	250
   246  0065                     _RCIF	set	101
   247  0064                     _TXIF	set	100
   248  0087                     _TRISC	set	135
   249  0088                     _TRISDbits	set	136
   250  0086                     _TRISBbits	set	134
   251  009E                     _ADRESL	set	158
   252  009F                     _ADCON1	set	159
   253  0099                     _SPBRG	set	153
   254  0098                     _TXSTAbits	set	152
   255  0098                     _TXSTA	set	152
   256  001D                     STR_4:
   257  001D  343C               	retlw	60	;'<'
   258  001E  3476               	retlw	118	;'v'
   259  001F  3461               	retlw	97	;'a'
   260  0020  346C               	retlw	108	;'l'
   261  0021  343E               	retlw	62	;'>'
   262  0022  340A               	retlw	10
   263  0023  3409               	retlw	9
   264  0024  344C               	retlw	76	;'L'
   265  0025  3465               	retlw	101	;'e'
   266  0026  3466               	retlw	102	;'f'
   267  0027  3474               	retlw	116	;'t'
   268  0028  343A               	retlw	58	;':'
   269  0029  3425               	retlw	37	;'%'
   270  002A  3464               	retlw	100	;'d'
   271  002B  3420               	retlw	32	;' '
   272  002C  3452               	retlw	82	;'R'
   273  002D  3469               	retlw	105	;'i'
   274  002E  3467               	retlw	103	;'g'
   275  002F  3468               	retlw	104	;'h'
   276  0030  3474               	retlw	116	;'t'
   277  0031  343A               	retlw	58	;':'
   278  0032  3425               	retlw	37	;'%'
   279  0033  3464               	retlw	100	;'d'
   280  0034  340A               	retlw	10
   281  0035  343C               	retlw	60	;'<'
   282  0036  342F               	retlw	47	;'/'
   283  0037  3476               	retlw	118	;'v'
   284  0038  3461               	retlw	97	;'a'
   285  0039  346C               	retlw	108	;'l'
   286  003A  343E               	retlw	62	;'>'
   287  003B  340A               	retlw	10
   288  003C  3400               	retlw	0
   289  003D                     STR_6:
   290  003D  343C               	retlw	60	;'<'
   291  003E  3476               	retlw	118	;'v'
   292  003F  3461               	retlw	97	;'a'
   293  0040  346C               	retlw	108	;'l'
   294  0041  343E               	retlw	62	;'>'
   295  0042  340A               	retlw	10
   296  0043  3409               	retlw	9
   297  0044  3454               	retlw	84	;'T'
   298  0045  3465               	retlw	101	;'e'
   299  0046  346D               	retlw	109	;'m'
   300  0047  3470               	retlw	112	;'p'
   301  0048  343A               	retlw	58	;':'
   302  0049  3425               	retlw	37	;'%'
   303  004A  3464               	retlw	100	;'d'
   304  004B  340A               	retlw	10
   305  004C  343C               	retlw	60	;'<'
   306  004D  342F               	retlw	47	;'/'
   307  004E  3476               	retlw	118	;'v'
   308  004F  3461               	retlw	97	;'a'
   309  0050  346C               	retlw	108	;'l'
   310  0051  343E               	retlw	62	;'>'
   311  0052  340A               	retlw	10
   312  0053  3400               	retlw	0
   313  0054                     STR_14:
   314  0054  343C               	retlw	60	;'<'
   315  0055  3477               	retlw	119	;'w'
   316  0056  3472               	retlw	114	;'r'
   317  0057  346E               	retlw	110	;'n'
   318  0058  343E               	retlw	62	;'>'
   319  0059  340A               	retlw	10
   320  005A  3409               	retlw	9
   321  005B  3445               	retlw	69	;'E'
   322  005C  3472               	retlw	114	;'r'
   323  005D  3472               	retlw	114	;'r'
   324  005E  346F               	retlw	111	;'o'
   325  005F  3472               	retlw	114	;'r'
   326  0060  3420               	retlw	32	;' '
   327  0061  3431               	retlw	49	;'1'
   328  0062  340A               	retlw	10
   329  0063  343C               	retlw	60	;'<'
   330  0064  342F               	retlw	47	;'/'
   331  0065  3477               	retlw	119	;'w'
   332  0066  3472               	retlw	114	;'r'
   333  0067  346E               	retlw	110	;'n'
   334  0068  343E               	retlw	62	;'>'
   335  0069  340A               	retlw	10
   336  006A  3400               	retlw	0
   337  006B                     STR_16:
   338  006B  343C               	retlw	60	;'<'
   339  006C  3477               	retlw	119	;'w'
   340  006D  3472               	retlw	114	;'r'
   341  006E  346E               	retlw	110	;'n'
   342  006F  343E               	retlw	62	;'>'
   343  0070  340A               	retlw	10
   344  0071  3409               	retlw	9
   345  0072  3445               	retlw	69	;'E'
   346  0073  3472               	retlw	114	;'r'
   347  0074  3472               	retlw	114	;'r'
   348  0075  346F               	retlw	111	;'o'
   349  0076  3472               	retlw	114	;'r'
   350  0077  3420               	retlw	32	;' '
   351  0078  3432               	retlw	50	;'2'
   352  0079  340A               	retlw	10
   353  007A  343C               	retlw	60	;'<'
   354  007B  342F               	retlw	47	;'/'
   355  007C  3477               	retlw	119	;'w'
   356  007D  3472               	retlw	114	;'r'
   357  007E  346E               	retlw	110	;'n'
   358  007F  343E               	retlw	62	;'>'
   359  0080  340A               	retlw	10
   360  0081  3400               	retlw	0
   361  0082                     STR_1:
   362  0082  343C               	retlw	60	;'<'
   363  0083  346D               	retlw	109	;'m'
   364  0084  346F               	retlw	111	;'o'
   365  0085  3474               	retlw	116	;'t'
   366  0086  343E               	retlw	62	;'>'
   367  0087  340A               	retlw	10
   368  0088  3409               	retlw	9
   369  0089  3453               	retlw	83	;'S'
   370  008A  3474               	retlw	116	;'t'
   371  008B  346F               	retlw	111	;'o'
   372  008C  3470               	retlw	112	;'p'
   373  008D  3470               	retlw	112	;'p'
   374  008E  3465               	retlw	101	;'e'
   375  008F  3464               	retlw	100	;'d'
   376  0090  340A               	retlw	10
   377  0091  343C               	retlw	60	;'<'
   378  0092  342F               	retlw	47	;'/'
   379  0093  346D               	retlw	109	;'m'
   380  0094  346F               	retlw	111	;'o'
   381  0095  3474               	retlw	116	;'t'
   382  0096  343E               	retlw	62	;'>'
   383  0097  340A               	retlw	10
   384  0098  3400               	retlw	0
   385  0099                     STR_2:
   386  0099  343C               	retlw	60	;'<'
   387  009A  346D               	retlw	109	;'m'
   388  009B  346F               	retlw	111	;'o'
   389  009C  3474               	retlw	116	;'t'
   390  009D  343E               	retlw	62	;'>'
   391  009E  340A               	retlw	10
   392  009F  3409               	retlw	9
   393  00A0  3452               	retlw	82	;'R'
   394  00A1  3469               	retlw	105	;'i'
   395  00A2  3467               	retlw	103	;'g'
   396  00A3  3468               	retlw	104	;'h'
   397  00A4  3474               	retlw	116	;'t'
   398  00A5  340A               	retlw	10
   399  00A6  343C               	retlw	60	;'<'
   400  00A7  342F               	retlw	47	;'/'
   401  00A8  346D               	retlw	109	;'m'
   402  00A9  346F               	retlw	111	;'o'
   403  00AA  3474               	retlw	116	;'t'
   404  00AB  343E               	retlw	62	;'>'
   405  00AC  340A               	retlw	10
   406  00AD  3400               	retlw	0
   407  00AE                     STR_3:
   408  00AE  343C               	retlw	60	;'<'
   409  00AF  346D               	retlw	109	;'m'
   410  00B0  346F               	retlw	111	;'o'
   411  00B1  3474               	retlw	116	;'t'
   412  00B2  343E               	retlw	62	;'>'
   413  00B3  340A               	retlw	10
   414  00B4  3409               	retlw	9
   415  00B5  344C               	retlw	76	;'L'
   416  00B6  3465               	retlw	101	;'e'
   417  00B7  3466               	retlw	102	;'f'
   418  00B8  3474               	retlw	116	;'t'
   419  00B9  340A               	retlw	10
   420  00BA  343C               	retlw	60	;'<'
   421  00BB  342F               	retlw	47	;'/'
   422  00BC  346D               	retlw	109	;'m'
   423  00BD  346F               	retlw	111	;'o'
   424  00BE  3474               	retlw	116	;'t'
   425  00BF  343E               	retlw	62	;'>'
   426  00C0  340A               	retlw	10
   427  00C1  3400               	retlw	0
   428  00C2                     STR_5:
   429  00C2  343C               	retlw	60	;'<'
   430  00C3  3461               	retlw	97	;'a'
   431  00C4  3463               	retlw	99	;'c'
   432  00C5  346B               	retlw	107	;'k'
   433  00C6  343E               	retlw	62	;'>'
   434  00C7  340A               	retlw	10
   435  00C8  343C               	retlw	60	;'<'
   436  00C9  342F               	retlw	47	;'/'
   437  00CA  3461               	retlw	97	;'a'
   438  00CB  3463               	retlw	99	;'c'
   439  00CC  346B               	retlw	107	;'k'
   440  00CD  343E               	retlw	62	;'>'
   441  00CE  340A               	retlw	10
   442  00CF  3400               	retlw	0
   443  00D0                     STR_9:
   444  00D0  343C               	retlw	60	;'<'
   445  00D1  346D               	retlw	109	;'m'
   446  00D2  346F               	retlw	111	;'o'
   447  00D3  3464               	retlw	100	;'d'
   448  00D4  343E               	retlw	62	;'>'
   449  00D5  3400               	retlw	0
   450  00D6                     STR_7:
   451  00D6  343C               	retlw	60	;'<'
   452  00D7  346C               	retlw	108	;'l'
   453  00D8  3469               	retlw	105	;'i'
   454  00D9  346D               	retlw	109	;'m'
   455  00DA  343E               	retlw	62	;'>'
   456  00DB  3400               	retlw	0
   457  00DC                     STR_11:
   458  00DC  343C               	retlw	60	;'<'
   459  00DD  3473               	retlw	115	;'s'
   460  00DE  3465               	retlw	101	;'e'
   461  00DF  346E               	retlw	110	;'n'
   462  00E0  343E               	retlw	62	;'>'
   463  00E1  3400               	retlw	0
   464  00E2                     STR_8:
   465  00E2  343C               	retlw	60	;'<'
   466  00E3  346D               	retlw	109	;'m'
   467  00E4  3469               	retlw	105	;'i'
   468  00E5  346E               	retlw	110	;'n'
   469  00E6  343E               	retlw	62	;'>'
   470  00E7  3400               	retlw	0
   471  00E8                     STR_10:
   472  00E8  343C               	retlw	60	;'<'
   473  00E9  346D               	retlw	109	;'m'
   474  00EA  346F               	retlw	111	;'o'
   475  00EB  346E               	retlw	110	;'n'
   476  00EC  343E               	retlw	62	;'>'
   477  00ED  3400               	retlw	0
   478  00EE                     STR_12:
   479  00EE  343C               	retlw	60	;'<'
   480  00EF  3474               	retlw	116	;'t'
   481  00F0  346D               	retlw	109	;'m'
   482  00F1  3470               	retlw	112	;'p'
   483  00F2  343E               	retlw	62	;'>'
   484  00F3  3400               	retlw	0
   485  00F4                     STR_13:
   486  00F4  343C               	retlw	60	;'<'
   487  00F5  346D               	retlw	109	;'m'
   488  00F6  3478               	retlw	120	;'x'
   489  00F7  3474               	retlw	116	;'t'
   490  00F8  343E               	retlw	62	;'>'
   491  00F9  3400               	retlw	0
   492  00FA                     STR_15:
   493  00FA  343C               	retlw	60	;'<'
   494  00FB  342F               	retlw	47	;'/'
   495  00FC  3400               	retlw	0
   496  0054                     
   497                           	psect	cinit
   498  07F3                     start_initialization:	
   499                           ; #config settings
   500                           
   501  07F3                     __initialization:
   502                           
   503                           ; Clear objects allocated to BANK3
   504  07F3  1783               	bsf	3,7	;select IRP bank2
   505  07F4  3090               	movlw	low __pbssBANK3
   506  07F5  0084               	movwf	4
   507  07F6  30B8               	movlw	low (__pbssBANK3+40)
   508  07F7  120A  158A  2607  120A  118A  	fcall	clear_ram0
   509  07FC                     end_of_initialization:	
   510                           ;End of C runtime variable initialization code
   511                           
   512  07FC                     __end_of__initialization:
   513  07FC  0183               	clrf	3
   514  07FD  120A  118A  2CD1   	ljmp	_main	;jump to C main() function
   515                           
   516                           	psect	bssBANK3
   517  0190                     __pbssBANK3:
   518  0190                     main@F1050:
   519  0190                     	ds	40
   520                           
   521                           	psect	clrtext
   522  0E07                     clear_ram0:	
   523                           ;	Called with FSR containing the base address, and
   524                           ;	W with the last address+1
   525                           
   526  0E07  0064               	clrwdt	;clear the watchdog before getting into this loop
   527  0E08                     clrloop0:
   528  0E08  0180               	clrf	0	;clear RAM location pointed to by FSR
   529  0E09  0A84               	incf	4,f	;increment pointer
   530  0E0A  0604               	xorwf	4,w	;XOR with final address
   531  0E0B  1903               	btfsc	3,2	;have we reached the end yet?
   532  0E0C  3400               	retlw	0	;all done for this memory range, return
   533  0E0D  0604               	xorwf	4,w	;XOR again to restore value
   534  0E0E  2E08               	goto	clrloop0	;do the next byte
   535                           
   536                           	psect	cstackBANK1
   537  00A0                     __pcstackBANK1:
   538  00A0                     main@msg:
   539                           
   540                           ; 40 bytes @ 0x0
   541  00A0                     	ds	40
   542  00C8                     main@lastButtonState:
   543                           
   544                           ; 2 bytes @ 0x28
   545  00C8                     	ds	2
   546  00CA                     main@lastValidButtonState:
   547                           
   548                           ; 2 bytes @ 0x2A
   549  00CA                     	ds	2
   550  00CC                     main@night:
   551                           
   552                           ; 2 bytes @ 0x2C
   553  00CC                     	ds	2
   554  00CE                     main@limit:
   555                           
   556                           ; 2 bytes @ 0x2E
   557  00CE                     	ds	2
   558  00D0                     main@temperature:
   559                           
   560                           ; 2 bytes @ 0x30
   561  00D0                     	ds	2
   562  00D2                     main@valTemp:
   563                           
   564                           ; 2 bytes @ 0x32
   565  00D2                     	ds	2
   566  00D4                     main@t:
   567                           
   568                           ; 2 bytes @ 0x34
   569  00D4                     	ds	2
   570  00D6                     main@monitorizacao:
   571                           
   572                           ; 2 bytes @ 0x36
   573  00D6                     	ds	2
   574  00D8                     main@mode:
   575                           
   576                           ; 2 bytes @ 0x38
   577  00D8                     	ds	2
   578  00DA                     main@motorState:
   579                           
   580                           ; 2 bytes @ 0x3A
   581  00DA                     	ds	2
   582  00DC                     main@op:
   583                           
   584                           ; 2 bytes @ 0x3C
   585  00DC                     	ds	2
   586                           
   587                           	psect	cstackCOMMON
   588  0070                     __pcstackCOMMON:
   589  0070                     ?_strchr:
   590  0070                     ?_setup_USART:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ??_setup_USART:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_enviar_caracter:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ??_enviar_caracter:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_botao:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_receber_caracter:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ??_receber_caracter:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_receber_msg:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_motorRight:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ??_motorRight:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_motorLeft:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ??_motorLeft:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_motorStop:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ??_motorStop:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_enviarAck:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_strlen:	
   636                           ; 1 bytes @ 0x0
   637                           
   638  0070                     ?_debouncer:	
   639                           ; 2 bytes @ 0x0
   640                           
   641  0070                     ?_sensor:	
   642                           ; 2 bytes @ 0x0
   643                           
   644  0070                     ?_main:	
   645                           ; 2 bytes @ 0x0
   646                           
   647  0070                     ?___wmul:	
   648                           ; 2 bytes @ 0x0
   649                           
   650  0070                     ?___lwdiv:	
   651                           ; 2 bytes @ 0x0
   652                           
   653  0070                     enviar_caracter@c:	
   654                           ; 2 bytes @ 0x0
   655                           
   656  0070                     botao@lastValidButtonState:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     debouncer@t:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     sensor@chanel:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ___wmul@multiplier:	
   666                           ; 2 bytes @ 0x0
   667                           
   668  0070                     ___lwdiv@divisor:	
   669                           ; 2 bytes @ 0x0
   670                           
   671  0070                     strlen@s:	
   672                           ; 2 bytes @ 0x0
   673                           
   674  0070                     strchr@chr:	
   675                           ; 2 bytes @ 0x0
   676                           
   677                           
   678                           ; 2 bytes @ 0x0
   679  0070                     	ds	1
   680  0071                     ?_enviar:
   681  0071                     ??_botao:	
   682                           ; 1 bytes @ 0x1
   683                           
   684  0071                     receber_caracter@carac:	
   685                           ; 1 bytes @ 0x1
   686                           
   687  0071                     enviar@msg:	
   688                           ; 1 bytes @ 0x1
   689                           
   690                           
   691                           ; 2 bytes @ 0x1
   692  0071                     	ds	1
   693  0072                     ??_strlen:
   694  0072                     ??_strchr:	
   695                           ; 1 bytes @ 0x2
   696                           
   697  0072                     ??_debouncer:	
   698                           ; 1 bytes @ 0x2
   699                           
   700  0072                     ??_receber_msg:	
   701                           ; 1 bytes @ 0x2
   702                           
   703  0072                     ??_sensor:	
   704                           ; 1 bytes @ 0x2
   705                           
   706  0072                     strchr@ptr:	
   707                           ; 1 bytes @ 0x2
   708                           
   709  0072                     ___wmul@multiplicand:	
   710                           ; 1 bytes @ 0x2
   711                           
   712  0072                     ___lwdiv@dividend:	
   713                           ; 2 bytes @ 0x2
   714                           
   715  0072                     strlen@cp:	
   716                           ; 2 bytes @ 0x2
   717                           
   718                           
   719                           ; 2 bytes @ 0x2
   720  0072                     	ds	1
   721  0073                     ??_enviar:
   722                           
   723                           ; 1 bytes @ 0x3
   724  0073                     	ds	1
   725  0074                     ??___wmul:
   726  0074                     ??___lwdiv:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0074                     ?_strncmp:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0074                     strncmp@s2:	
   733                           ; 2 bytes @ 0x4
   734                           
   735  0074                     receber_msg@x:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0074                     ___wmul@product:	
   739                           ; 2 bytes @ 0x4
   740                           
   741                           
   742                           ; 2 bytes @ 0x4
   743  0074                     	ds	1
   744  0075                     ___lwdiv@quotient:
   745  0075                     strncmp@len:	
   746                           ; 2 bytes @ 0x5
   747                           
   748                           
   749                           ; 2 bytes @ 0x5
   750  0075                     	ds	1
   751  0076                     ?_stringToInt:
   752  0076                     botao@mode:	
   753                           ; 2 bytes @ 0x6
   754                           
   755  0076                     enviar@i:	
   756                           ; 1 bytes @ 0x6
   757                           
   758  0076                     receber_msg@i:	
   759                           ; 2 bytes @ 0x6
   760                           
   761                           
   762                           ; 2 bytes @ 0x6
   763  0076                     	ds	1
   764  0077                     ??_strncmp:
   765  0077                     debouncer@lastButtonState:	
   766                           ; 1 bytes @ 0x7
   767                           
   768  0077                     ___lwdiv@counter:	
   769                           ; 1 bytes @ 0x7
   770                           
   771                           
   772                           ; 1 bytes @ 0x7
   773  0077                     	ds	1
   774  0078                     ?_sendMotorState:
   775  0078                     ??_stringToInt:	
   776                           ; 1 bytes @ 0x8
   777                           
   778  0078                     ??_enviarAck:	
   779                           ; 1 bytes @ 0x8
   780                           
   781  0078                     ?___lwmod:	
   782                           ; 1 bytes @ 0x8
   783                           
   784  0078                     receber_msg@output:	
   785                           ; 2 bytes @ 0x8
   786                           
   787  0078                     sendMotorState@motorState:	
   788                           ; 1 bytes @ 0x8
   789                           
   790  0078                     ___lwmod@divisor:	
   791                           ; 2 bytes @ 0x8
   792                           
   793                           
   794                           ; 2 bytes @ 0x8
   795  0078                     	ds	1
   796  0079                     strncmp@s1:
   797                           
   798                           ; 1 bytes @ 0x9
   799  0079                     	ds	1
   800  007A                     ?_strstr:
   801  007A                     strstr@s2:	
   802                           ; 1 bytes @ 0xA
   803                           
   804  007A                     sendMotorState@monitorizacao:	
   805                           ; 1 bytes @ 0xA
   806                           
   807  007A                     ___lwmod@dividend:	
   808                           ; 2 bytes @ 0xA
   809                           
   810                           
   811                           ; 2 bytes @ 0xA
   812  007A                     	ds	1
   813  007B                     ??_strstr:
   814                           
   815                           ; 1 bytes @ 0xB
   816  007B                     	ds	1
   817  007C                     ??_sendMotorState:
   818  007C                     ?_standbyMode:	
   819                           ; 1 bytes @ 0xC
   820                           
   821  007C                     ??___lwmod:	
   822                           ; 1 bytes @ 0xC
   823                           
   824  007C                     standbyMode@monitorizacao:	
   825                           ; 1 bytes @ 0xC
   826                           
   827                           
   828                           ; 2 bytes @ 0xC
   829  007C                     	ds	1
   830  007D                     ___lwmod@counter:
   831                           
   832                           ; 1 bytes @ 0xD
   833  007D                     	ds	1
   834                           
   835                           	psect	cstackBANK0
   836  0020                     __pcstackBANK0:
   837  0020                     ?_normalMode:
   838  0020                     ??_standbyMode:	
   839                           ; 1 bytes @ 0x0
   840                           
   841  0020                     ?_sprintf:	
   842                           ; 1 bytes @ 0x0
   843                           
   844  0020                     sprintf@f:	
   845                           ; 2 bytes @ 0x0
   846                           
   847  0020                     strstr@s1:	
   848                           ; 1 bytes @ 0x0
   849                           
   850  0020                     normalMode@left:	
   851                           ; 1 bytes @ 0x0
   852                           
   853  0020                     stringToInt@i:	
   854                           ; 2 bytes @ 0x0
   855                           
   856                           
   857                           ; 2 bytes @ 0x0
   858  0020                     	ds	2
   859  0022                     standbyMode@motorState:
   860  0022                     normalMode@right:	
   861                           ; 1 bytes @ 0x2
   862                           
   863  0022                     stringToInt@result:	
   864                           ; 2 bytes @ 0x2
   865                           
   866                           
   867                           ; 2 bytes @ 0x2
   868  0022                     	ds	2
   869  0024                     stringToInt@string:
   870  0024                     normalMode@night:	
   871                           ; 1 bytes @ 0x4
   872                           
   873                           
   874                           ; 2 bytes @ 0x4
   875  0024                     	ds	1
   876  0025                     ??_sprintf:
   877                           
   878                           ; 1 bytes @ 0x5
   879  0025                     	ds	1
   880  0026                     normalMode@limit:
   881                           
   882                           ; 2 bytes @ 0x6
   883  0026                     	ds	2
   884  0028                     normalMode@motorState:
   885  0028                     sprintf@ap:	
   886                           ; 1 bytes @ 0x8
   887                           
   888                           
   889                           ; 1 bytes @ 0x8
   890  0028                     	ds	1
   891  0029                     sprintf@flag:
   892  0029                     normalMode@monitorizacao:	
   893                           ; 1 bytes @ 0x9
   894                           
   895                           
   896                           ; 2 bytes @ 0x9
   897  0029                     	ds	1
   898  002A                     sprintf@prec:
   899                           
   900                           ; 1 bytes @ 0xA
   901  002A                     	ds	1
   902  002B                     ??_normalMode:
   903  002B                     sprintf@val:	
   904                           ; 1 bytes @ 0xB
   905                           
   906                           
   907                           ; 2 bytes @ 0xB
   908  002B                     	ds	2
   909  002D                     sprintf@sp:
   910                           
   911                           ; 1 bytes @ 0xD
   912  002D                     	ds	1
   913  002E                     sprintf@c:
   914                           
   915                           ; 1 bytes @ 0xE
   916  002E                     	ds	1
   917  002F                     ?_mostraSensores:
   918  002F                     ?_mostraTemp:	
   919                           ; 1 bytes @ 0xF
   920                           
   921  002F                     mostraSensores@valLeft:	
   922                           ; 1 bytes @ 0xF
   923                           
   924  002F                     mostraTemp@valTemp:	
   925                           ; 2 bytes @ 0xF
   926                           
   927                           
   928                           ; 2 bytes @ 0xF
   929  002F                     	ds	2
   930  0031                     ??_mostraTemp:
   931  0031                     mostraSensores@valRight:	
   932                           ; 1 bytes @ 0x11
   933                           
   934                           
   935                           ; 2 bytes @ 0x11
   936  0031                     	ds	1
   937  0032                     mostraTemp@valString:
   938                           
   939                           ; 20 bytes @ 0x12
   940  0032                     	ds	1
   941  0033                     ??_mostraSensores:
   942                           
   943                           ; 1 bytes @ 0x13
   944  0033                     	ds	1
   945  0034                     mostraSensores@valString:
   946                           
   947                           ; 20 bytes @ 0x14
   948  0034                     	ds	20
   949  0048                     ?_checkXML:
   950  0048                     checkXML@limit:	
   951                           ; 1 bytes @ 0x28
   952                           
   953                           
   954                           ; 1 bytes @ 0x28
   955  0048                     	ds	1
   956  0049                     checkXML@night:
   957                           
   958                           ; 1 bytes @ 0x29
   959  0049                     	ds	1
   960  004A                     checkXML@mode:
   961                           
   962                           ; 1 bytes @ 0x2A
   963  004A                     	ds	1
   964  004B                     checkXML@monitorizacao:
   965                           
   966                           ; 1 bytes @ 0x2B
   967  004B                     	ds	1
   968  004C                     checkXML@temperature:
   969                           
   970                           ; 1 bytes @ 0x2C
   971  004C                     	ds	1
   972  004D                     checkXML@valTemp:
   973                           
   974                           ; 1 bytes @ 0x2D
   975  004D                     	ds	1
   976  004E                     checkXML@op:
   977                           
   978                           ; 1 bytes @ 0x2E
   979  004E                     	ds	1
   980  004F                     ??_checkXML:
   981                           
   982                           ; 1 bytes @ 0x2F
   983  004F                     	ds	2
   984  0051                     checkXML@teste:
   985                           
   986                           ; 2 bytes @ 0x31
   987  0051                     	ds	2
   988  0053                     checkXML@msg:
   989                           
   990                           ; 1 bytes @ 0x33
   991  0053                     	ds	1
   992  0054                     ??_main:
   993                           
   994                           ; 1 bytes @ 0x34
   995  0054                     	ds	7
   996                           
   997                           	psect	maintext
   998  04D1                     __pmaintext:	
   999 ;;
  1000 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
  1001 ;;
  1002 ;; *************** function _main *****************
  1003 ;; Defined at:
  1004 ;;		line 280 in file "main.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;  msg            40    0[BANK1 ] unsigned char [40]
  1009 ;;  op              2   60[BANK1 ] int 
  1010 ;;  motorState      2   58[BANK1 ] int 
  1011 ;;  mode            2   56[BANK1 ] int 
  1012 ;;  monitorizaca    2   54[BANK1 ] int 
  1013 ;;  t               2   52[BANK1 ] int 
  1014 ;;  valTemp         2   50[BANK1 ] int 
  1015 ;;  temperature     2   48[BANK1 ] int 
  1016 ;;  limit           2   46[BANK1 ] int 
  1017 ;;  night           2   44[BANK1 ] int 
  1018 ;;  lastValidBut    2   42[BANK1 ] int 
  1019 ;;  lastButtonSt    2   40[BANK1 ] int 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  2  198[None  ] int 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : B00/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         0       0       0       0       0
  1030 ;;      Locals:         0       0      62       0       0
  1031 ;;      Temps:          0       7       0       0       0
  1032 ;;      Totals:         0       7      62       0       0
  1033 ;;Total ram usage:       69 bytes
  1034 ;; Hardware stack levels required when called: 4
  1035 ;; This function calls:
  1036 ;;		_botao
  1037 ;;		_checkXML
  1038 ;;		_debouncer
  1039 ;;		_normalMode
  1040 ;;		_receber_msg
  1041 ;;		_sensor
  1042 ;;		_setup_USART
  1043 ;;		_standbyMode
  1044 ;; This function is called by:
  1045 ;;		Startup code after reset
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           
  1050                           ;psect for function _main
  1051  04D1                     _main:
  1052  04D1                     l1930:	
  1053                           ;incstack = 0
  1054                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1055                           
  1056                           
  1057                           ;main.c: 281:     TRISBbits.TRISB3 = 1;
  1058  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  1059  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  1060  04D3  1586               	bsf	6,3	;volatile
  1061                           
  1062                           ;main.c: 282:     TRISDbits.TRISD0 = 0;
  1063  04D4  1008               	bcf	8,0	;volatile
  1064                           
  1065                           ;main.c: 283:     TRISDbits.TRISD1 = 0;
  1066  04D5  1088               	bcf	8,1	;volatile
  1067                           
  1068                           ;main.c: 284:     TRISDbits.TRISD2 = 0;
  1069  04D6  1108               	bcf	8,2	;volatile
  1070                           
  1071                           ;main.c: 285:     TRISDbits.TRISD3 = 0;
  1072  04D7  1188               	bcf	8,3	;volatile
  1073  04D8                     l1932:
  1074                           
  1075                           ;main.c: 286:     TRISC = 0;
  1076  04D8  0187               	clrf	7	;volatile
  1077  04D9                     l1934:
  1078                           
  1079                           ;main.c: 288:     char msg[40] = "\0";
  1080  04D9  30A0               	movlw	main@msg& (0+255)
  1081  04DA  0084               	movwf	4
  1082  04DB  3028               	movlw	40
  1083  04DC  00FF               	movwf	btemp+1
  1084  04DD                     u1460:
  1085  04DD  1383               	bcf	3,7	;select IRP bank1
  1086  04DE  0180               	clrf	0
  1087  04DF  0A84               	incf	4,f
  1088  04E0  0BFF               	decfsz	btemp+1,f
  1089  04E1  2CDD               	goto	u1460
  1090  04E2                     l1936:
  1091                           
  1092                           ;main.c: 289:     int lastButtonState = 1, lastValidButtonState = 1;
  1093  04E2  3001               	movlw	1
  1094  04E3  00C8               	movwf	main@lastButtonState^(0+128)
  1095  04E4  3000               	movlw	0
  1096  04E5  00C9               	movwf	(main@lastButtonState^(0+128)+1)
  1097  04E6                     l1938:
  1098  04E6  3001               	movlw	1
  1099  04E7  00CA               	movwf	main@lastValidButtonState^(0+128)
  1100  04E8  3000               	movlw	0
  1101  04E9  00CB               	movwf	(main@lastValidButtonState^(0+128)+1)
  1102  04EA                     l1940:
  1103                           
  1104                           ;main.c: 290:     int motorState = 0;
  1105  04EA  01DA               	clrf	main@motorState^(0+128)
  1106  04EB  01DB               	clrf	(main@motorState+1)^(0+128)
  1107  04EC                     l1942:
  1108                           
  1109                           ;main.c: 291:     int t = 0;
  1110  04EC  01D4               	clrf	main@t^(0+128)
  1111  04ED  01D5               	clrf	(main@t+1)^(0+128)
  1112  04EE                     l1944:
  1113                           
  1114                           ;main.c: 292:     int night = 200;
  1115  04EE  30C8               	movlw	200
  1116  04EF  00CC               	movwf	main@night^(0+128)
  1117  04F0  3000               	movlw	0
  1118  04F1  00CD               	movwf	(main@night^(0+128)+1)
  1119  04F2                     l1946:
  1120                           
  1121                           ;main.c: 293:     int limit = 200;
  1122  04F2  30C8               	movlw	200
  1123  04F3  00CE               	movwf	main@limit^(0+128)
  1124  04F4  3000               	movlw	0
  1125  04F5  00CF               	movwf	(main@limit^(0+128)+1)
  1126  04F6                     l1948:
  1127                           
  1128                           ;main.c: 294:     int monitorizacao = 1;
  1129  04F6  3001               	movlw	1
  1130  04F7  00D6               	movwf	main@monitorizacao^(0+128)
  1131  04F8  3000               	movlw	0
  1132  04F9  00D7               	movwf	(main@monitorizacao^(0+128)+1)
  1133  04FA                     l1950:
  1134                           
  1135                           ;main.c: 295:     int temperature = 200;
  1136  04FA  30C8               	movlw	200
  1137  04FB  00D0               	movwf	main@temperature^(0+128)
  1138  04FC  3000               	movlw	0
  1139  04FD  00D1               	movwf	(main@temperature^(0+128)+1)
  1140  04FE                     l1952:
  1141                           
  1142                           ;main.c: 296:     int mode = 0;
  1143  04FE  01D8               	clrf	main@mode^(0+128)
  1144  04FF  01D9               	clrf	(main@mode+1)^(0+128)
  1145  0500                     l1954:
  1146                           
  1147                           ;main.c: 297:     int op = 0;
  1148  0500  01DC               	clrf	main@op^(0+128)
  1149  0501  01DD               	clrf	(main@op+1)^(0+128)
  1150  0502                     l1956:
  1151                           
  1152                           ;main.c: 298:     int valTemp = 0;
  1153  0502  01D2               	clrf	main@valTemp^(0+128)
  1154  0503  01D3               	clrf	(main@valTemp+1)^(0+128)
  1155  0504                     l1958:
  1156                           
  1157                           ;main.c: 299:     setup_USART();
  1158  0504  120A  158A  262F  120A  118A  	fcall	_setup_USART
  1159  0509                     l1960:
  1160                           
  1161                           ;main.c: 306:         if (RCIF) {
  1162  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1163  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1164  050B  1E8C               	btfss	12,5	;volatile
  1165  050C  2D0E               	goto	u1471
  1166  050D  2D0F               	goto	u1470
  1167  050E                     u1471:
  1168  050E  2D39               	goto	l1966
  1169  050F                     u1470:
  1170  050F                     l1962:
  1171                           
  1172                           ;main.c: 307:             receber_msg(msg);
  1173  050F  30A0               	movlw	(low (main@msg| 0))& (0+255)
  1174  0510  120A  158A  270A  120A  118A  	fcall	_receber_msg
  1175  0515                     l1964:
  1176                           
  1177                           ;main.c: 308:             checkXML(msg, &limit, &night, &mode, &monitorizacao, &temperat
      +                          ure, &valTemp, &op);
  1178  0515  30CE               	movlw	(low (main@limit| 0))& (0+255)
  1179  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1180  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1181  0518  00D4               	movwf	??_main
  1182  0519  0854               	movf	??_main,w
  1183  051A  00C8               	movwf	checkXML@limit
  1184  051B  30CC               	movlw	(low (main@night| 0))& (0+255)
  1185  051C  00D5               	movwf	??_main+1
  1186  051D  0855               	movf	??_main+1,w
  1187  051E  00C9               	movwf	checkXML@night
  1188  051F  30D8               	movlw	(low (main@mode| 0))& (0+255)
  1189  0520  00D6               	movwf	??_main+2
  1190  0521  0856               	movf	??_main+2,w
  1191  0522  00CA               	movwf	checkXML@mode
  1192  0523  30D6               	movlw	(low (main@monitorizacao| 0))& (0+255)
  1193  0524  00D7               	movwf	??_main+3
  1194  0525  0857               	movf	??_main+3,w
  1195  0526  00CB               	movwf	checkXML@monitorizacao
  1196  0527  30D0               	movlw	(low (main@temperature| 0))& (0+255)
  1197  0528  00D8               	movwf	??_main+4
  1198  0529  0858               	movf	??_main+4,w
  1199  052A  00CC               	movwf	checkXML@temperature
  1200  052B  30D2               	movlw	(low (main@valTemp| 0))& (0+255)
  1201  052C  00D9               	movwf	??_main+5
  1202  052D  0859               	movf	??_main+5,w
  1203  052E  00CD               	movwf	checkXML@valTemp
  1204  052F  30DC               	movlw	(low (main@op| 0))& (0+255)
  1205  0530  00DA               	movwf	??_main+6
  1206  0531  085A               	movf	??_main+6,w
  1207  0532  00CE               	movwf	checkXML@op
  1208  0533  30A0               	movlw	(low (main@msg| 0))& (0+255)
  1209  0534  120A  118A  25E6  120A  118A  	fcall	_checkXML
  1210  0539                     l1966:
  1211                           
  1212                           ;main.c: 311:         if (temperature < sensor(2)) {
  1213  0539  3002               	movlw	2
  1214  053A  00F0               	movwf	sensor@chanel
  1215  053B  3000               	movlw	0
  1216  053C  00F1               	movwf	sensor@chanel+1
  1217  053D  120A  118A  2262  120A  118A  	fcall	_sensor
  1218  0542  1683               	bsf	3,5	;RP0=1, select bank1
  1219  0543  1303               	bcf	3,6	;RP1=0, select bank1
  1220  0544  0851               	movf	(main@temperature+1)^(0+128),w
  1221  0545  3A80               	xorlw	128
  1222  0546  1283               	bcf	3,5	;RP0=0, select bank0
  1223  0547  1303               	bcf	3,6	;RP1=0, select bank0
  1224  0548  00D4               	movwf	??_main
  1225  0549  0871               	movf	?_sensor+1,w
  1226  054A  3A80               	xorlw	128
  1227  054B  0254               	subwf	??_main,w
  1228  054C  1D03               	skipz
  1229  054D  2D52               	goto	u1485
  1230  054E  0870               	movf	?_sensor,w
  1231  054F  1683               	bsf	3,5	;RP0=1, select bank1
  1232  0550  1303               	bcf	3,6	;RP1=0, select bank1
  1233  0551  0250               	subwf	main@temperature^(0+128),w
  1234  0552                     u1485:
  1235  0552  1803               	skipnc
  1236  0553  2D55               	goto	u1481
  1237  0554  2D56               	goto	u1480
  1238  0555                     u1481:
  1239  0555  2D5D               	goto	l1970
  1240  0556                     u1480:
  1241  0556                     l1968:
  1242                           
  1243                           ;main.c: 312:             mode = 1;
  1244  0556  3001               	movlw	1
  1245  0557  1683               	bsf	3,5	;RP0=1, select bank1
  1246  0558  1303               	bcf	3,6	;RP1=0, select bank1
  1247  0559  00D8               	movwf	main@mode^(0+128)
  1248  055A  3000               	movlw	0
  1249  055B  00D9               	movwf	(main@mode^(0+128)+1)
  1250                           
  1251                           ;main.c: 313:         } else {
  1252  055C  2D7B               	goto	l1974
  1253  055D                     l1970:
  1254                           
  1255                           ;main.c: 314:             if (debouncer(&lastButtonState, &t)) {
  1256  055D  30D4               	movlw	(low (main@t| 0))& (0+255)
  1257  055E  1283               	bcf	3,5	;RP0=0, select bank0
  1258  055F  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0560  00D4               	movwf	??_main
  1260  0561  0854               	movf	??_main,w
  1261  0562  00F0               	movwf	debouncer@t
  1262  0563  30C8               	movlw	(low (main@lastButtonState| 0))& (0+255)
  1263  0564  120A  118A  22BB  120A  118A  	fcall	_debouncer
  1264  0569  0870               	movf	?_debouncer,w
  1265  056A  0471               	iorwf	?_debouncer+1,w
  1266  056B  1903               	btfsc	3,2
  1267  056C  2D6E               	goto	u1491
  1268  056D  2D6F               	goto	u1490
  1269  056E                     u1491:
  1270  056E  2D7B               	goto	l1974
  1271  056F                     u1490:
  1272  056F                     l1972:
  1273                           
  1274                           ;main.c: 315:                 botao(&mode, &lastValidButtonState);
  1275  056F  30CA               	movlw	(low (main@lastValidButtonState| 0))& (0+255)
  1276  0570  1283               	bcf	3,5	;RP0=0, select bank0
  1277  0571  1303               	bcf	3,6	;RP1=0, select bank0
  1278  0572  00D4               	movwf	??_main
  1279  0573  0854               	movf	??_main,w
  1280  0574  00F0               	movwf	botao@lastValidButtonState
  1281  0575  30D8               	movlw	(low (main@mode| 0))& (0+255)
  1282  0576  120A  118A  2171  120A  118A  	fcall	_botao
  1283  057B                     l1974:
  1284                           
  1285                           ;main.c: 321:         if (mode) {
  1286  057B  1683               	bsf	3,5	;RP0=1, select bank1
  1287  057C  1303               	bcf	3,6	;RP1=0, select bank1
  1288  057D  0858               	movf	main@mode^(0+128),w
  1289  057E  0459               	iorwf	(main@mode+1)^(0+128),w
  1290  057F  1903               	btfsc	3,2
  1291  0580  2D82               	goto	u1501
  1292  0581  2D83               	goto	u1500
  1293  0582                     u1501:
  1294  0582  2D94               	goto	l206
  1295  0583                     u1500:
  1296  0583                     l1976:
  1297                           
  1298                           ;main.c: 323:             PORTDbits.RD0 = 0;
  1299  0583  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0584  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0585  1008               	bcf	8,0	;volatile
  1302                           
  1303                           ;main.c: 324:             PORTDbits.RD1 = 1;
  1304  0586  1488               	bsf	8,1	;volatile
  1305  0587                     l1978:
  1306                           
  1307                           ;main.c: 325:             standbyMode(&motorState, monitorizacao);
  1308  0587  1683               	bsf	3,5	;RP0=1, select bank1
  1309  0588  1303               	bcf	3,6	;RP1=0, select bank1
  1310  0589  0857               	movf	(main@monitorizacao+1)^(0+128),w
  1311  058A  00FD               	movwf	standbyMode@monitorizacao+1
  1312  058B  0856               	movf	main@monitorizacao^(0+128),w
  1313  058C  00FC               	movwf	standbyMode@monitorizacao
  1314  058D  30DA               	movlw	(low (main@motorState| 0))& (0+255)
  1315  058E  120A  118A  20FD  120A  118A  	fcall	_standbyMode
  1316                           
  1317                           ;main.c: 326:         } else {
  1318  0593  2D09               	goto	l1960
  1319  0594                     l206:
  1320                           
  1321                           ;main.c: 328:             PORTDbits.RD0 = 1;
  1322  0594  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0595  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0596  1408               	bsf	8,0	;volatile
  1325                           
  1326                           ;main.c: 329:             PORTDbits.RD1 = 0;
  1327  0597  1088               	bcf	8,1	;volatile
  1328  0598                     l1980:
  1329                           
  1330                           ;main.c: 330:             normalMode(sensor(0), sensor(1), night, limit, &motorState, mo
      +                          nitorizacao);
  1331  0598  3000               	movlw	0
  1332  0599  00F0               	movwf	sensor@chanel
  1333  059A  00F1               	movwf	sensor@chanel+1
  1334  059B  120A  118A  2262  120A  118A  	fcall	_sensor
  1335  05A0  0871               	movf	?_sensor+1,w
  1336  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1337  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1338  05A3  00A1               	movwf	normalMode@left+1
  1339  05A4  0870               	movf	?_sensor,w
  1340  05A5  00A0               	movwf	normalMode@left
  1341  05A6  3001               	movlw	1
  1342  05A7  00F0               	movwf	sensor@chanel
  1343  05A8  3000               	movlw	0
  1344  05A9  00F1               	movwf	sensor@chanel+1
  1345  05AA  120A  118A  2262  120A  118A  	fcall	_sensor
  1346  05AF  0871               	movf	?_sensor+1,w
  1347  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  1348  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  1349  05B2  00A3               	movwf	normalMode@right+1
  1350  05B3  0870               	movf	?_sensor,w
  1351  05B4  00A2               	movwf	normalMode@right
  1352  05B5  1683               	bsf	3,5	;RP0=1, select bank1
  1353  05B6  1303               	bcf	3,6	;RP1=0, select bank1
  1354  05B7  084D               	movf	(main@night+1)^(0+128),w
  1355  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1356  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  1357  05BA  00A5               	movwf	normalMode@night+1
  1358  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  1359  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  1360  05BD  084C               	movf	main@night^(0+128),w
  1361  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1362  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1363  05C0  00A4               	movwf	normalMode@night
  1364  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1365  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1366  05C3  084F               	movf	(main@limit+1)^(0+128),w
  1367  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1368  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1369  05C6  00A7               	movwf	normalMode@limit+1
  1370  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  1371  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  1372  05C9  084E               	movf	main@limit^(0+128),w
  1373  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1374  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1375  05CC  00A6               	movwf	normalMode@limit
  1376  05CD  30DA               	movlw	(low (main@motorState| 0))& (0+255)
  1377  05CE  00D4               	movwf	??_main
  1378  05CF  0854               	movf	??_main,w
  1379  05D0  00A8               	movwf	normalMode@motorState
  1380  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  1381  05D2  1303               	bcf	3,6	;RP1=0, select bank1
  1382  05D3  0857               	movf	(main@monitorizacao+1)^(0+128),w
  1383  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1384  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1385  05D6  00AA               	movwf	normalMode@monitorizacao+1
  1386  05D7  1683               	bsf	3,5	;RP0=1, select bank1
  1387  05D8  1303               	bcf	3,6	;RP1=0, select bank1
  1388  05D9  0856               	movf	main@monitorizacao^(0+128),w
  1389  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  1390  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  1391  05DC  00A9               	movwf	normalMode@monitorizacao
  1392  05DD  120A  118A  231C  120A  118A  	fcall	_normalMode
  1393  05E2  2D09               	goto	l1960
  1394  05E3  120A  118A  2800   	ljmp	start
  1395  05E6                     __end_of_main:
  1396                           
  1397                           	psect	text1
  1398  00FD                     __ptext1:	
  1399 ;; *************** function _standbyMode *****************
  1400 ;; Defined at:
  1401 ;;		line 151 in file "main.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  motorState      1    wreg     PTR int 
  1404 ;;		 -> main@motorState(2), 
  1405 ;;  monitorizaca    2   12[COMMON] int 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  motorState      1    2[BANK0 ] PTR int 
  1408 ;;		 -> main@motorState(2), 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1418 ;;      Params:         2       0       0       0       0
  1419 ;;      Locals:         0       1       0       0       0
  1420 ;;      Temps:          0       2       0       0       0
  1421 ;;      Totals:         2       3       0       0       0
  1422 ;;Total ram usage:        5 bytes
  1423 ;; Hardware stack levels used: 1
  1424 ;; Hardware stack levels required when called: 3
  1425 ;; This function calls:
  1426 ;;		_motorStop
  1427 ;;		_sendMotorState
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _standbyMode
  1435  00FD                     _standbyMode:
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _standbyMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1439                           ;standbyMode@motorState stored from wreg
  1440  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1441  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1442  00FF  00A2               	movwf	standbyMode@motorState
  1443  0100                     l1828:
  1444                           
  1445                           ;main.c: 152:     motorStop();
  1446  0100  120A  158A  2601  120A  118A  	fcall	_motorStop
  1447  0105                     l1830:
  1448                           
  1449                           ;main.c: 153:     if (*motorState != 0) {
  1450  0105  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0106  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0107  0822               	movf	standbyMode@motorState,w
  1453  0108  0084               	movwf	4
  1454  0109  1383               	bcf	3,7	;select IRP bank0
  1455  010A  0800               	movf	0,w
  1456  010B  00A0               	movwf	??_standbyMode
  1457  010C  0A84               	incf	4,f
  1458  010D  0800               	movf	0,w
  1459  010E  00A1               	movwf	??_standbyMode+1
  1460  010F  0820               	movf	??_standbyMode,w
  1461  0110  0421               	iorwf	??_standbyMode+1,w
  1462  0111  1903               	btfsc	3,2
  1463  0112  2914               	goto	u1321
  1464  0113  2915               	goto	u1320
  1465  0114                     u1321:
  1466  0114  292A               	goto	l124
  1467  0115                     u1320:
  1468  0115                     l1832:
  1469                           
  1470                           ;main.c: 154:         *motorState = 0;
  1471  0115  0822               	movf	standbyMode@motorState,w
  1472  0116  0084               	movwf	4
  1473  0117  0180               	clrf	0
  1474  0118  0A84               	incf	4,f
  1475  0119  0180               	clrf	0
  1476  011A                     l1834:
  1477                           
  1478                           ;main.c: 155:         sendMotorState(*motorState, monitorizacao);
  1479  011A  0822               	movf	standbyMode@motorState,w
  1480  011B  0084               	movwf	4
  1481  011C  0800               	movf	0,w
  1482  011D  00F8               	movwf	sendMotorState@motorState
  1483  011E  0A84               	incf	4,f
  1484  011F  0800               	movf	0,w
  1485  0120  00F9               	movwf	sendMotorState@motorState+1
  1486  0121  087D               	movf	standbyMode@monitorizacao+1,w
  1487  0122  00FB               	movwf	sendMotorState@monitorizacao+1
  1488  0123  087C               	movf	standbyMode@monitorizacao,w
  1489  0124  00FA               	movwf	sendMotorState@monitorizacao
  1490  0125  120A  158A  26D4  120A  118A  	fcall	_sendMotorState
  1491  012A                     l124:
  1492  012A  0008               	return
  1493  012B                     __end_of_standbyMode:
  1494                           
  1495                           	psect	text2
  1496  0E2F                     __ptext2:	
  1497 ;; *************** function _setup_USART *****************
  1498 ;; Defined at:
  1499 ;;		line 15 in file "main.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           
  1527                           ;psect for function _setup_USART
  1528  0E2F                     _setup_USART:
  1529  0E2F                     l1732:	
  1530                           ;incstack = 0
  1531                           ; Regs used in _setup_USART: [wreg+status,2]
  1532                           
  1533                           
  1534                           ;main.c: 16:     RCSTA = 0;
  1535  0E2F  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0E30  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0E31  0198               	clrf	24	;volatile
  1538  0E32                     l1734:
  1539                           
  1540                           ;main.c: 17:     RCSTAbits.CREN = 1;
  1541  0E32  1618               	bsf	24,4	;volatile
  1542  0E33                     l1736:
  1543                           
  1544                           ;main.c: 18:     RCSTAbits.SPEN = 1;
  1545  0E33  1798               	bsf	24,7	;volatile
  1546                           
  1547                           ;main.c: 19:     TXSTA = 0;
  1548  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  1550  0E36  0198               	clrf	24	;volatile
  1551  0E37                     l1738:
  1552                           
  1553                           ;main.c: 20:     TXSTAbits.TXEN = 1;
  1554  0E37  1698               	bsf	24,5	;volatile
  1555  0E38                     l1740:
  1556                           
  1557                           ;main.c: 21:     TXSTAbits.BRGH = 1;
  1558  0E38  1518               	bsf	24,2	;volatile
  1559  0E39                     l1742:
  1560                           
  1561                           ;main.c: 22:     SPBRG = 25;
  1562  0E39  3019               	movlw	25
  1563  0E3A  0099               	movwf	25	;volatile
  1564  0E3B                     l51:
  1565  0E3B  0008               	return
  1566  0E3C                     __end_of_setup_USART:
  1567                           
  1568                           	psect	text3
  1569  0F0A                     __ptext3:	
  1570 ;; *************** function _receber_msg *****************
  1571 ;; Defined at:
  1572 ;;		line 79 in file "main.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  output          1    wreg     PTR unsigned char 
  1575 ;;		 -> main@msg(40), 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  output          1    8[COMMON] PTR unsigned char 
  1578 ;;		 -> main@msg(40), 
  1579 ;;  i               2    6[COMMON] unsigned int 
  1580 ;;  x               2    4[COMMON] int 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1590 ;;      Params:         0       0       0       0       0
  1591 ;;      Locals:         5       0       0       0       0
  1592 ;;      Temps:          2       0       0       0       0
  1593 ;;      Totals:         7       0       0       0       0
  1594 ;;Total ram usage:        7 bytes
  1595 ;; Hardware stack levels used: 1
  1596 ;; Hardware stack levels required when called: 1
  1597 ;; This function calls:
  1598 ;;		_receber_caracter
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           
  1605                           ;psect for function _receber_msg
  1606  0F0A                     _receber_msg:
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _receber_msg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1610                           ;receber_msg@output stored from wreg
  1611  0F0A  00F8               	movwf	receber_msg@output
  1612  0F0B                     l1772:
  1613                           
  1614                           ;main.c: 80:     unsigned int i = 0;
  1615  0F0B  01F6               	clrf	receber_msg@i
  1616  0F0C  01F7               	clrf	receber_msg@i+1
  1617  0F0D                     l1774:
  1618                           
  1619                           ;main.c: 81:     int x = 1;
  1620  0F0D  3001               	movlw	1
  1621  0F0E  00F4               	movwf	receber_msg@x
  1622  0F0F  3000               	movlw	0
  1623  0F10  00F5               	movwf	receber_msg@x+1
  1624                           
  1625                           ;main.c: 82:     while (x) {
  1626  0F11  2F39               	goto	l1786
  1627  0F12                     l1776:
  1628                           
  1629                           ;main.c: 83:         output[i] = receber_caracter();
  1630  0F12  120A  158A  2623  120A  158A  	fcall	_receber_caracter
  1631  0F17  00F2               	movwf	??_receber_msg
  1632  0F18  0876               	movf	receber_msg@i,w
  1633  0F19  0778               	addwf	receber_msg@output,w
  1634  0F1A  00F3               	movwf	??_receber_msg+1
  1635  0F1B  0873               	movf	??_receber_msg+1,w
  1636  0F1C  0084               	movwf	4
  1637  0F1D  0872               	movf	??_receber_msg,w
  1638  0F1E  1383               	bcf	3,7	;select IRP bank0
  1639  0F1F  0080               	movwf	0
  1640  0F20                     l1778:
  1641                           
  1642                           ;main.c: 84:         if (output[i] == '\n') {
  1643  0F20  0876               	movf	receber_msg@i,w
  1644  0F21  0778               	addwf	receber_msg@output,w
  1645  0F22  00F2               	movwf	??_receber_msg
  1646  0F23  0872               	movf	??_receber_msg,w
  1647  0F24  0084               	movwf	4
  1648  0F25  300A               	movlw	10
  1649  0F26  0600               	xorwf	0,w
  1650  0F27  1D03               	btfss	3,2
  1651  0F28  2F2A               	goto	u1221
  1652  0F29  2F2B               	goto	u1220
  1653  0F2A                     u1221:
  1654  0F2A  2F33               	goto	l1784
  1655  0F2B                     u1220:
  1656  0F2B                     l1780:
  1657                           
  1658                           ;main.c: 85:             x = 0;
  1659  0F2B  01F4               	clrf	receber_msg@x
  1660  0F2C  01F5               	clrf	receber_msg@x+1
  1661  0F2D                     l1782:
  1662                           
  1663                           ;main.c: 86:             output[i + 1] = '\0';
  1664  0F2D  0876               	movf	receber_msg@i,w
  1665  0F2E  0778               	addwf	receber_msg@output,w
  1666  0F2F  00F2               	movwf	??_receber_msg
  1667  0F30  0A72               	incf	??_receber_msg,w
  1668  0F31  0084               	movwf	4
  1669  0F32  0180               	clrf	0
  1670  0F33                     l1784:
  1671                           
  1672                           ;main.c: 88:         i++;
  1673  0F33  3001               	movlw	1
  1674  0F34  07F6               	addwf	receber_msg@i,f
  1675  0F35  1803               	skipnc
  1676  0F36  0AF7               	incf	receber_msg@i+1,f
  1677  0F37  3000               	movlw	0
  1678  0F38  07F7               	addwf	receber_msg@i+1,f
  1679  0F39                     l1786:
  1680                           
  1681                           ;main.c: 82:     while (x) {
  1682  0F39  0874               	movf	receber_msg@x,w
  1683  0F3A  0475               	iorwf	receber_msg@x+1,w
  1684  0F3B  1D03               	btfss	3,2
  1685  0F3C  2F3E               	goto	u1231
  1686  0F3D  2F3F               	goto	u1230
  1687  0F3E                     u1231:
  1688  0F3E  2F12               	goto	l1776
  1689  0F3F                     u1230:
  1690  0F3F                     l89:
  1691  0F3F  0008               	return
  1692  0F40                     __end_of_receber_msg:
  1693                           
  1694                           	psect	text4
  1695  0E23                     __ptext4:	
  1696 ;; *************** function _receber_caracter *****************
  1697 ;; Defined at:
  1698 ;;		line 72 in file "main.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  carac           1    1[COMMON] unsigned char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      unsigned char 
  1705 ;; Registers used:
  1706 ;;		wreg
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1712 ;;      Params:         0       0       0       0       0
  1713 ;;      Locals:         1       0       0       0       0
  1714 ;;      Temps:          1       0       0       0       0
  1715 ;;      Totals:         2       0       0       0       0
  1716 ;;Total ram usage:        2 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_receber_msg
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           
  1726                           ;psect for function _receber_caracter
  1727  0E23                     _receber_caracter:
  1728  0E23                     l1636:	
  1729                           ;incstack = 0
  1730                           ; Regs used in _receber_caracter: [wreg]
  1731                           
  1732  0E23                     l79:	
  1733                           ;main.c: 73:     char carac;;main.c: 74:     while (RCIF == 0);
  1734                           
  1735  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0E25  1E8C               	btfss	12,5	;volatile
  1738  0E26  2E28               	goto	u1101
  1739  0E27  2E29               	goto	u1100
  1740  0E28                     u1101:
  1741  0E28  2E23               	goto	l79
  1742  0E29                     u1100:
  1743  0E29                     l1638:
  1744                           
  1745                           ;main.c: 75:     carac = RCREG;
  1746  0E29  081A               	movf	26,w	;volatile
  1747  0E2A  00F0               	movwf	??_receber_caracter
  1748  0E2B  0870               	movf	??_receber_caracter,w
  1749  0E2C  00F1               	movwf	receber_caracter@carac
  1750                           
  1751                           ;main.c: 76:     return carac;
  1752  0E2D  0871               	movf	receber_caracter@carac,w
  1753  0E2E                     l82:
  1754  0E2E  0008               	return
  1755  0E2F                     __end_of_receber_caracter:
  1756                           
  1757                           	psect	text5
  1758  031C                     __ptext5:	
  1759 ;; *************** function _normalMode *****************
  1760 ;; Defined at:
  1761 ;;		line 123 in file "main.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  left            2    0[BANK0 ] int 
  1764 ;;  right           2    2[BANK0 ] int 
  1765 ;;  night           2    4[BANK0 ] int 
  1766 ;;  limit           2    6[BANK0 ] int 
  1767 ;;  motorState      1    8[BANK0 ] PTR int 
  1768 ;;		 -> main@motorState(2), 
  1769 ;;  monitorizaca    2    9[BANK0 ] int 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1781 ;;      Params:         0      11       0       0       0
  1782 ;;      Locals:         0       0       0       0       0
  1783 ;;      Temps:          0       3       0       0       0
  1784 ;;      Totals:         0      14       0       0       0
  1785 ;;Total ram usage:       14 bytes
  1786 ;; Hardware stack levels used: 1
  1787 ;; Hardware stack levels required when called: 3
  1788 ;; This function calls:
  1789 ;;		_motorLeft
  1790 ;;		_motorRight
  1791 ;;		_motorStop
  1792 ;;		_sendMotorState
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           
  1799                           ;psect for function _normalMode
  1800  031C                     _normalMode:
  1801  031C                     l1788:	
  1802                           ;incstack = 0
  1803                           ; Regs used in _normalMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1804                           
  1805                           
  1806                           ;main.c: 124:     if (left < night && right < night) {
  1807  031C  1283               	bcf	3,5	;RP0=0, select bank0
  1808  031D  1303               	bcf	3,6	;RP1=0, select bank0
  1809  031E  0821               	movf	normalMode@left+1,w
  1810  031F  3A80               	xorlw	128
  1811  0320  00AB               	movwf	??_normalMode
  1812  0321  0825               	movf	normalMode@night+1,w
  1813  0322  3A80               	xorlw	128
  1814  0323  022B               	subwf	??_normalMode,w
  1815  0324  1D03               	skipz
  1816  0325  2B28               	goto	u1245
  1817  0326  0824               	movf	normalMode@night,w
  1818  0327  0220               	subwf	normalMode@left,w
  1819  0328                     u1245:
  1820  0328  1803               	skipnc
  1821  0329  2B2B               	goto	u1241
  1822  032A  2B2C               	goto	u1240
  1823  032B                     u1241:
  1824  032B  2B67               	goto	l1800
  1825  032C                     u1240:
  1826  032C                     l1790:
  1827  032C  1283               	bcf	3,5	;RP0=0, select bank0
  1828  032D  1303               	bcf	3,6	;RP1=0, select bank0
  1829  032E  0823               	movf	normalMode@right+1,w
  1830  032F  3A80               	xorlw	128
  1831  0330  00AB               	movwf	??_normalMode
  1832  0331  0825               	movf	normalMode@night+1,w
  1833  0332  3A80               	xorlw	128
  1834  0333  022B               	subwf	??_normalMode,w
  1835  0334  1D03               	skipz
  1836  0335  2B38               	goto	u1255
  1837  0336  0824               	movf	normalMode@night,w
  1838  0337  0222               	subwf	normalMode@right,w
  1839  0338                     u1255:
  1840  0338  1803               	skipnc
  1841  0339  2B3B               	goto	u1251
  1842  033A  2B3C               	goto	u1250
  1843  033B                     u1251:
  1844  033B  2B67               	goto	l1800
  1845  033C                     u1250:
  1846  033C                     l1792:
  1847                           
  1848                           ;main.c: 125:         motorStop();
  1849  033C  120A  158A  2601  120A  118A  	fcall	_motorStop
  1850  0341                     l1794:
  1851                           
  1852                           ;main.c: 126:         if (*motorState != 0) {
  1853  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0343  0828               	movf	normalMode@motorState,w
  1856  0344  0084               	movwf	4
  1857  0345  1383               	bcf	3,7	;select IRP bank0
  1858  0346  0800               	movf	0,w
  1859  0347  00AB               	movwf	??_normalMode
  1860  0348  0A84               	incf	4,f
  1861  0349  0800               	movf	0,w
  1862  034A  00AC               	movwf	??_normalMode+1
  1863  034B  082B               	movf	??_normalMode,w
  1864  034C  042C               	iorwf	??_normalMode+1,w
  1865  034D  1903               	btfsc	3,2
  1866  034E  2B50               	goto	u1261
  1867  034F  2B51               	goto	u1260
  1868  0350                     u1261:
  1869  0350  2BE8               	goto	l120
  1870  0351                     u1260:
  1871  0351                     l1796:
  1872                           
  1873                           ;main.c: 127:             *motorState = 0;
  1874  0351  0828               	movf	normalMode@motorState,w
  1875  0352  0084               	movwf	4
  1876  0353  0180               	clrf	0
  1877  0354  0A84               	incf	4,f
  1878  0355  0180               	clrf	0
  1879  0356                     l1798:
  1880                           
  1881                           ;main.c: 128:             sendMotorState(*motorState, monitorizacao);
  1882  0356  0828               	movf	normalMode@motorState,w
  1883  0357  0084               	movwf	4
  1884  0358  0800               	movf	0,w
  1885  0359  00F8               	movwf	sendMotorState@motorState
  1886  035A  0A84               	incf	4,f
  1887  035B  0800               	movf	0,w
  1888  035C  00F9               	movwf	sendMotorState@motorState+1
  1889  035D  082A               	movf	normalMode@monitorizacao+1,w
  1890  035E  00FB               	movwf	sendMotorState@monitorizacao+1
  1891  035F  0829               	movf	normalMode@monitorizacao,w
  1892  0360  00FA               	movwf	sendMotorState@monitorizacao
  1893  0361  120A  158A  26D4  120A  118A  	fcall	_sendMotorState
  1894  0366  2BE8               	goto	l120
  1895  0367                     l1800:
  1896  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0369  0820               	movf	normalMode@left,w
  1899  036A  0222               	subwf	normalMode@right,w
  1900  036B  00AB               	movwf	??_normalMode
  1901  036C  0821               	movf	normalMode@left+1,w
  1902  036D  1C03               	skipc
  1903  036E  0A21               	incf	normalMode@left+1,w
  1904  036F  0223               	subwf	normalMode@right+1,w
  1905  0370  00AC               	movwf	??_normalMode+1
  1906  0371  0827               	movf	normalMode@limit+1,w
  1907  0372  3A80               	xorlw	128
  1908  0373  00AD               	movwf	??_normalMode+2
  1909  0374  082C               	movf	??_normalMode+1,w
  1910  0375  3A80               	xorlw	128
  1911  0376  022D               	subwf	??_normalMode+2,w
  1912  0377  1D03               	skipz
  1913  0378  2B7B               	goto	u1275
  1914  0379  082B               	movf	??_normalMode,w
  1915  037A  0226               	subwf	normalMode@limit,w
  1916  037B                     u1275:
  1917  037B  1803               	skipnc
  1918  037C  2B7E               	goto	u1271
  1919  037D  2B7F               	goto	u1270
  1920  037E                     u1271:
  1921  037E  2B9C               	goto	l1810
  1922  037F                     u1270:
  1923  037F                     l1802:
  1924                           
  1925                           ;main.c: 131:         motorRight();
  1926  037F  120A  158A  25FB  120A  118A  	fcall	_motorRight
  1927  0384                     l1804:
  1928                           
  1929                           ;main.c: 132:         if (*motorState != 1) {
  1930  0384  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0385  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0386  0828               	movf	normalMode@motorState,w
  1933  0387  0084               	movwf	4
  1934  0388  1383               	bcf	3,7	;select IRP bank0
  1935  0389  0800               	movf	0,w
  1936  038A  00AB               	movwf	??_normalMode
  1937  038B  0A84               	incf	4,f
  1938  038C  0800               	movf	0,w
  1939  038D  00AC               	movwf	??_normalMode+1
  1940  038E  032B               	decf	??_normalMode,w
  1941  038F  042C               	iorwf	??_normalMode+1,w
  1942  0390  1903               	btfsc	3,2
  1943  0391  2B93               	goto	u1281
  1944  0392  2B94               	goto	u1280
  1945  0393                     u1281:
  1946  0393  2BE8               	goto	l120
  1947  0394                     u1280:
  1948  0394                     l1806:
  1949                           
  1950                           ;main.c: 133:             *motorState = 1;
  1951  0394  0828               	movf	normalMode@motorState,w
  1952  0395  0084               	movwf	4
  1953  0396  3001               	movlw	1
  1954  0397  0080               	movwf	0
  1955  0398  0A84               	incf	4,f
  1956  0399  3000               	movlw	0
  1957  039A  0080               	movwf	0
  1958  039B  2B56               	goto	l1798
  1959  039C                     l1810:
  1960  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1961  039D  1303               	bcf	3,6	;RP1=0, select bank0
  1962  039E  0822               	movf	normalMode@right,w
  1963  039F  0220               	subwf	normalMode@left,w
  1964  03A0  00AB               	movwf	??_normalMode
  1965  03A1  0823               	movf	normalMode@right+1,w
  1966  03A2  1C03               	skipc
  1967  03A3  0A23               	incf	normalMode@right+1,w
  1968  03A4  0221               	subwf	normalMode@left+1,w
  1969  03A5  00AC               	movwf	??_normalMode+1
  1970  03A6  0827               	movf	normalMode@limit+1,w
  1971  03A7  3A80               	xorlw	128
  1972  03A8  00AD               	movwf	??_normalMode+2
  1973  03A9  082C               	movf	??_normalMode+1,w
  1974  03AA  3A80               	xorlw	128
  1975  03AB  022D               	subwf	??_normalMode+2,w
  1976  03AC  1D03               	skipz
  1977  03AD  2BB0               	goto	u1295
  1978  03AE  082B               	movf	??_normalMode,w
  1979  03AF  0226               	subwf	normalMode@limit,w
  1980  03B0                     u1295:
  1981  03B0  1803               	skipnc
  1982  03B1  2BB3               	goto	u1291
  1983  03B2  2BB4               	goto	u1290
  1984  03B3                     u1291:
  1985  03B3  2BD2               	goto	l1820
  1986  03B4                     u1290:
  1987  03B4                     l1812:
  1988                           
  1989                           ;main.c: 137:         motorLeft();
  1990  03B4  120A  158A  25F5  120A  118A  	fcall	_motorLeft
  1991  03B9                     l1814:
  1992                           
  1993                           ;main.c: 138:         if (*motorState != 2) {
  1994  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  1995  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  1996  03BB  0828               	movf	normalMode@motorState,w
  1997  03BC  0084               	movwf	4
  1998  03BD  1383               	bcf	3,7	;select IRP bank0
  1999  03BE  0800               	movf	0,w
  2000  03BF  00AB               	movwf	??_normalMode
  2001  03C0  0A84               	incf	4,f
  2002  03C1  0800               	movf	0,w
  2003  03C2  00AC               	movwf	??_normalMode+1
  2004  03C3  3002               	movlw	2
  2005  03C4  062B               	xorwf	??_normalMode,w
  2006  03C5  042C               	iorwf	??_normalMode+1,w
  2007  03C6  1903               	btfsc	3,2
  2008  03C7  2BC9               	goto	u1301
  2009  03C8  2BCA               	goto	u1300
  2010  03C9                     u1301:
  2011  03C9  2BE8               	goto	l120
  2012  03CA                     u1300:
  2013  03CA                     l1816:
  2014                           
  2015                           ;main.c: 139:             *motorState = 2;
  2016  03CA  0828               	movf	normalMode@motorState,w
  2017  03CB  0084               	movwf	4
  2018  03CC  3002               	movlw	2
  2019  03CD  0080               	movwf	0
  2020  03CE  0A84               	incf	4,f
  2021  03CF  3000               	movlw	0
  2022  03D0  0080               	movwf	0
  2023  03D1  2B56               	goto	l1798
  2024  03D2                     l1820:
  2025                           
  2026                           ;main.c: 143:         motorStop();
  2027  03D2  120A  158A  2601  120A  118A  	fcall	_motorStop
  2028  03D7                     l1822:
  2029                           
  2030                           ;main.c: 144:         if (*motorState != 0) {
  2031  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2032  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2033  03D9  0828               	movf	normalMode@motorState,w
  2034  03DA  0084               	movwf	4
  2035  03DB  1383               	bcf	3,7	;select IRP bank0
  2036  03DC  0800               	movf	0,w
  2037  03DD  00AB               	movwf	??_normalMode
  2038  03DE  0A84               	incf	4,f
  2039  03DF  0800               	movf	0,w
  2040  03E0  00AC               	movwf	??_normalMode+1
  2041  03E1  082B               	movf	??_normalMode,w
  2042  03E2  042C               	iorwf	??_normalMode+1,w
  2043  03E3  1903               	btfsc	3,2
  2044  03E4  2BE6               	goto	u1311
  2045  03E5  2BE7               	goto	u1310
  2046  03E6                     u1311:
  2047  03E6  2BE8               	goto	l120
  2048  03E7                     u1310:
  2049  03E7  2B51               	goto	l1796
  2050  03E8                     l120:
  2051  03E8  0008               	return
  2052  03E9                     __end_of_normalMode:
  2053                           
  2054                           	psect	text6
  2055  0ED4                     __ptext6:	
  2056 ;; *************** function _sendMotorState *****************
  2057 ;; Defined at:
  2058 ;;		line 110 in file "main.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  motorState      2    8[COMMON] int 
  2061 ;;  monitorizaca    2   10[COMMON] int 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2073 ;;      Params:         4       0       0       0       0
  2074 ;;      Locals:         0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0
  2076 ;;      Totals:         4       0       0       0       0
  2077 ;;Total ram usage:        4 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; Hardware stack levels required when called: 2
  2080 ;; This function calls:
  2081 ;;		_enviar
  2082 ;; This function is called by:
  2083 ;;		_normalMode
  2084 ;;		_standbyMode
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           
  2089                           ;psect for function _sendMotorState
  2090  0ED4                     _sendMotorState:
  2091  0ED4                     l1648:	
  2092                           ;incstack = 0
  2093                           ; Regs used in _sendMotorState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2094                           
  2095                           
  2096                           ;main.c: 111:     if (monitorizacao) {
  2097  0ED4  087A               	movf	sendMotorState@monitorizacao,w
  2098  0ED5  047B               	iorwf	sendMotorState@monitorizacao+1,w
  2099  0ED6  1903               	btfsc	3,2
  2100  0ED7  2ED9               	goto	u1111
  2101  0ED8  2EDA               	goto	u1110
  2102  0ED9                     u1111:
  2103  0ED9  2F09               	goto	l107
  2104  0EDA                     u1110:
  2105  0EDA  2EF9               	goto	l1660
  2106  0EDB                     l1652:
  2107  0EDB  3070               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2108  0EDC  00F1               	movwf	enviar@msg
  2109  0EDD  3080               	movlw	128
  2110  0EDE  00F2               	movwf	enviar@msg+1
  2111  0EDF  120A  158A  277A  120A  158A  	fcall	_enviar
  2112                           
  2113                           ;main.c: 114:                 break;
  2114  0EE4  2F09               	goto	l107
  2115  0EE5                     l1654:
  2116  0EE5  3087               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2117  0EE6  00F1               	movwf	enviar@msg
  2118  0EE7  3080               	movlw	128
  2119  0EE8  00F2               	movwf	enviar@msg+1
  2120  0EE9  120A  158A  277A  120A  158A  	fcall	_enviar
  2121                           
  2122                           ;main.c: 116:                 break;
  2123  0EEE  2F09               	goto	l107
  2124  0EEF                     l1656:
  2125  0EEF  309C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2126  0EF0  00F1               	movwf	enviar@msg
  2127  0EF1  3080               	movlw	128
  2128  0EF2  00F2               	movwf	enviar@msg+1
  2129  0EF3  120A  158A  277A  120A  158A  	fcall	_enviar
  2130                           
  2131                           ;main.c: 118:                 break;
  2132  0EF8  2F09               	goto	l107
  2133  0EF9                     l1660:
  2134                           
  2135                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2136                           ; Switch size 1, requested type "simple"
  2137                           ; Number of cases is 1, Range of values is 0 to 0
  2138                           ; switch strategies available:
  2139                           ; Name         Instructions Cycles
  2140                           ; simple_byte            4     3 (average)
  2141                           ; direct_byte           11     8 (fixed)
  2142                           ; jumptable            260     6 (fixed)
  2143                           ;	Chosen strategy is simple_byte
  2144  0EF9  0879               	movf	sendMotorState@motorState+1,w
  2145  0EFA  3A00               	xorlw	0	; case 0
  2146  0EFB  1903               	skipnz
  2147  0EFC  2EFE               	goto	l2062
  2148  0EFD  2F09               	goto	l107
  2149  0EFE                     l2062:
  2150                           
  2151                           ; Switch size 1, requested type "simple"
  2152                           ; Number of cases is 3, Range of values is 0 to 2
  2153                           ; switch strategies available:
  2154                           ; Name         Instructions Cycles
  2155                           ; simple_byte           10     6 (average)
  2156                           ; direct_byte           17     8 (fixed)
  2157                           ; jumptable            260     6 (fixed)
  2158                           ;	Chosen strategy is simple_byte
  2159  0EFE  0878               	movf	sendMotorState@motorState,w
  2160  0EFF  3A00               	xorlw	0	; case 0
  2161  0F00  1903               	skipnz
  2162  0F01  2EDB               	goto	l1652
  2163  0F02  3A01               	xorlw	1	; case 1
  2164  0F03  1903               	skipnz
  2165  0F04  2EE5               	goto	l1654
  2166  0F05  3A03               	xorlw	3	; case 2
  2167  0F06  1903               	skipnz
  2168  0F07  2EEF               	goto	l1656
  2169  0F08  2F09               	goto	l107
  2170  0F09                     l107:
  2171  0F09  0008               	return
  2172  0F0A                     __end_of_sendMotorState:
  2173                           
  2174                           	psect	text7
  2175  0E01                     __ptext7:	
  2176 ;; *************** function _motorStop *****************
  2177 ;; Defined at:
  2178 ;;		line 104 in file "main.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  1    wreg      void 
  2185 ;; Registers used:
  2186 ;;		None
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2192 ;;      Params:         0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0
  2195 ;;      Totals:         0       0       0       0       0
  2196 ;;Total ram usage:        0 bytes
  2197 ;; Hardware stack levels used: 1
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_normalMode
  2202 ;;		_standbyMode
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           
  2207                           ;psect for function _motorStop
  2208  0E01                     _motorStop:
  2209  0E01                     l1646:	
  2210                           ;incstack = 0
  2211                           ; Regs used in _motorStop: []
  2212                           
  2213                           
  2214                           ;main.c: 105:     PORTCbits.RC5 = 0;
  2215  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0E03  1287               	bcf	7,5	;volatile
  2218                           
  2219                           ;main.c: 106:     PORTDbits.RD2 = 0;
  2220  0E04  1108               	bcf	8,2	;volatile
  2221                           
  2222                           ;main.c: 107:     PORTDbits.RD3 = 0;
  2223  0E05  1188               	bcf	8,3	;volatile
  2224  0E06                     l98:
  2225  0E06  0008               	return
  2226  0E07                     __end_of_motorStop:
  2227                           
  2228                           	psect	text8
  2229  0DFB                     __ptext8:	
  2230 ;; *************** function _motorRight *****************
  2231 ;; Defined at:
  2232 ;;		line 92 in file "main.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		None
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0
  2249 ;;      Totals:         0       0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_normalMode
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _motorRight
  2261  0DFB                     _motorRight:
  2262  0DFB                     l1642:	
  2263                           ;incstack = 0
  2264                           ; Regs used in _motorRight: []
  2265                           
  2266                           
  2267                           ;main.c: 93:     PORTCbits.RC5 = 1;
  2268  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0DFD  1687               	bsf	7,5	;volatile
  2271                           
  2272                           ;main.c: 94:     PORTDbits.RD2 = 1;
  2273  0DFE  1508               	bsf	8,2	;volatile
  2274                           
  2275                           ;main.c: 95:     PORTDbits.RD3 = 0;
  2276  0DFF  1188               	bcf	8,3	;volatile
  2277  0E00                     l92:
  2278  0E00  0008               	return
  2279  0E01                     __end_of_motorRight:
  2280                           
  2281                           	psect	text9
  2282  0DF5                     __ptext9:	
  2283 ;; *************** function _motorLeft *****************
  2284 ;; Defined at:
  2285 ;;		line 98 in file "main.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		None
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2299 ;;      Params:         0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used: 1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_normalMode
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           
  2313                           ;psect for function _motorLeft
  2314  0DF5                     _motorLeft:
  2315  0DF5                     l1644:	
  2316                           ;incstack = 0
  2317                           ; Regs used in _motorLeft: []
  2318                           
  2319                           
  2320                           ;main.c: 99:     PORTCbits.RC5 = 1;
  2321  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0DF7  1687               	bsf	7,5	;volatile
  2324                           
  2325                           ;main.c: 100:     PORTDbits.RD2 = 0;
  2326  0DF8  1108               	bcf	8,2	;volatile
  2327                           
  2328                           ;main.c: 101:     PORTDbits.RD3 = 1;
  2329  0DF9  1588               	bsf	8,3	;volatile
  2330  0DFA                     l95:
  2331  0DFA  0008               	return
  2332  0DFB                     __end_of_motorLeft:
  2333                           
  2334                           	psect	text10
  2335  02BB                     __ptext10:	
  2336 ;; *************** function _debouncer *****************
  2337 ;; Defined at:
  2338 ;;		line 55 in file "main.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;  lastButtonSt    1    wreg     PTR int 
  2341 ;;		 -> main@lastButtonState(2), 
  2342 ;;  t               1    0[COMMON] PTR int 
  2343 ;;		 -> main@t(2), 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  lastButtonSt    1    7[COMMON] PTR int 
  2346 ;;		 -> main@lastButtonState(2), 
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  2    0[COMMON] int 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2356 ;;      Params:         2       0       0       0       0
  2357 ;;      Locals:         1       0       0       0       0
  2358 ;;      Temps:          5       0       0       0       0
  2359 ;;      Totals:         8       0       0       0       0
  2360 ;;Total ram usage:        8 bytes
  2361 ;; Hardware stack levels used: 1
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _debouncer
  2371  02BB                     _debouncer:
  2372                           
  2373                           ;incstack = 0
  2374                           ; Regs used in _debouncer: [wreg-fsr0h+status,2+status,0]
  2375                           ;debouncer@lastButtonState stored from wreg
  2376  02BB  00F7               	movwf	debouncer@lastButtonState
  2377  02BC                     l1756:
  2378                           
  2379                           ;main.c: 57:     if (*lastButtonState == PORTBbits.RB3) {
  2380  02BC  0877               	movf	debouncer@lastButtonState,w
  2381  02BD  0084               	movwf	4
  2382  02BE  1383               	bcf	3,7	;select IRP bank0
  2383  02BF  0800               	movf	0,w
  2384  02C0  00F2               	movwf	??_debouncer
  2385  02C1  0A84               	incf	4,f
  2386  02C2  0800               	movf	0,w
  2387  02C3  00F3               	movwf	??_debouncer+1
  2388  02C4  1283               	bcf	3,5	;RP0=0, select bank0
  2389  02C5  1303               	bcf	3,6	;RP1=0, select bank0
  2390  02C6  0C06               	rrf	6,w	;volatile
  2391  02C7  00F4               	movwf	??_debouncer+2
  2392  02C8  0CF4               	rrf	??_debouncer+2,f
  2393  02C9  0C74               	rrf	??_debouncer+2,w
  2394  02CA  3901               	andlw	1
  2395  02CB  00F5               	movwf	??_debouncer+3
  2396  02CC  01F6               	clrf	??_debouncer+4
  2397  02CD  0873               	movf	??_debouncer+1,w
  2398  02CE  0676               	xorwf	??_debouncer+4,w
  2399  02CF  1D03               	skipz
  2400  02D0  2AD3               	goto	u1205
  2401  02D1  0872               	movf	??_debouncer,w
  2402  02D2  0675               	xorwf	??_debouncer+3,w
  2403  02D3                     u1205:
  2404  02D3  1D03               	skipz
  2405  02D4  2AD6               	goto	u1201
  2406  02D5  2AD7               	goto	u1200
  2407  02D6                     u1201:
  2408  02D6  2AEE               	goto	l1760
  2409  02D7                     u1200:
  2410  02D7                     l1758:
  2411                           
  2412                           ;main.c: 58:         *t = *t + 1;
  2413  02D7  0870               	movf	debouncer@t,w
  2414  02D8  0084               	movwf	4
  2415  02D9  0800               	movf	0,w
  2416  02DA  00F2               	movwf	??_debouncer
  2417  02DB  0A84               	incf	4,f
  2418  02DC  0800               	movf	0,w
  2419  02DD  00F3               	movwf	??_debouncer+1
  2420  02DE  0872               	movf	??_debouncer,w
  2421  02DF  3E01               	addlw	1
  2422  02E0  00F4               	movwf	??_debouncer+2
  2423  02E1  0873               	movf	??_debouncer+1,w
  2424  02E2  1803               	skipnc
  2425  02E3  3E01               	addlw	1
  2426  02E4  3E00               	addlw	0
  2427  02E5  00F5               	movwf	??_debouncer+3
  2428  02E6  0870               	movf	debouncer@t,w
  2429  02E7  0084               	movwf	4
  2430  02E8  0874               	movf	??_debouncer+2,w
  2431  02E9  0080               	movwf	0
  2432  02EA  0A84               	incf	4,f
  2433  02EB  0875               	movf	??_debouncer+3,w
  2434  02EC  0080               	movwf	0
  2435                           
  2436                           ;main.c: 59:     } else {
  2437  02ED  2AF3               	goto	l74
  2438  02EE                     l1760:
  2439                           
  2440                           ;main.c: 60:         *t = 0;
  2441  02EE  0870               	movf	debouncer@t,w
  2442  02EF  0084               	movwf	4
  2443  02F0  0180               	clrf	0
  2444  02F1  0A84               	incf	4,f
  2445  02F2  0180               	clrf	0
  2446  02F3                     l74:	
  2447                           ;main.c: 61:     }
  2448                           
  2449                           
  2450                           ;main.c: 62:     *lastButtonState = PORTBbits.RB3;
  2451  02F3  0C06               	rrf	6,w	;volatile
  2452  02F4  00F2               	movwf	??_debouncer
  2453  02F5  0CF2               	rrf	??_debouncer,f
  2454  02F6  0C72               	rrf	??_debouncer,w
  2455  02F7  3901               	andlw	1
  2456  02F8  00F3               	movwf	??_debouncer+1
  2457  02F9  01F4               	clrf	??_debouncer+2
  2458  02FA  0877               	movf	debouncer@lastButtonState,w
  2459  02FB  0084               	movwf	4
  2460  02FC  0873               	movf	??_debouncer+1,w
  2461  02FD  0080               	movwf	0
  2462  02FE  0A84               	incf	4,f
  2463  02FF  0874               	movf	??_debouncer+2,w
  2464  0300  0080               	movwf	0
  2465                           
  2466                           ;main.c: 64:     if (*t == 10) {
  2467  0301  0870               	movf	debouncer@t,w
  2468  0302  0084               	movwf	4
  2469  0303  0800               	movf	0,w
  2470  0304  00F2               	movwf	??_debouncer
  2471  0305  0A84               	incf	4,f
  2472  0306  0800               	movf	0,w
  2473  0307  00F3               	movwf	??_debouncer+1
  2474  0308  300A               	movlw	10
  2475  0309  0672               	xorwf	??_debouncer,w
  2476  030A  0473               	iorwf	??_debouncer+1,w
  2477  030B  1D03               	btfss	3,2
  2478  030C  2B0E               	goto	u1211
  2479  030D  2B0F               	goto	u1210
  2480  030E                     u1211:
  2481  030E  2B19               	goto	l1768
  2482  030F                     u1210:
  2483  030F                     l1762:
  2484                           
  2485                           ;main.c: 65:         *t = 0;
  2486  030F  0870               	movf	debouncer@t,w
  2487  0310  0084               	movwf	4
  2488  0311  0180               	clrf	0
  2489  0312  0A84               	incf	4,f
  2490  0313  0180               	clrf	0
  2491  0314                     l1764:
  2492                           
  2493                           ;main.c: 66:         return 1;
  2494  0314  3001               	movlw	1
  2495  0315  00F0               	movwf	?_debouncer
  2496  0316  3000               	movlw	0
  2497  0317  00F1               	movwf	?_debouncer+1
  2498  0318  2B1B               	goto	l76
  2499  0319                     l1768:
  2500                           
  2501                           ;main.c: 68:     return 0;
  2502  0319  01F0               	clrf	?_debouncer
  2503  031A  01F1               	clrf	?_debouncer+1
  2504  031B                     l76:
  2505  031B  0008               	return
  2506  031C                     __end_of_debouncer:
  2507                           
  2508                           	psect	text11
  2509  05E6                     __ptext11:	
  2510 ;; *************** function _checkXML *****************
  2511 ;; Defined at:
  2512 ;;		line 213 in file "main.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  msg             1    wreg     PTR unsigned char 
  2515 ;;		 -> main@msg(40), 
  2516 ;;  limit           1   40[BANK0 ] PTR int 
  2517 ;;		 -> main@limit(2), 
  2518 ;;  night           1   41[BANK0 ] PTR int 
  2519 ;;		 -> main@night(2), 
  2520 ;;  mode            1   42[BANK0 ] PTR int 
  2521 ;;		 -> main@mode(2), 
  2522 ;;  monitorizaca    1   43[BANK0 ] PTR int 
  2523 ;;		 -> main@monitorizacao(2), 
  2524 ;;  temperature     1   44[BANK0 ] PTR int 
  2525 ;;		 -> main@temperature(2), 
  2526 ;;  valTemp         1   45[BANK0 ] PTR int 
  2527 ;;		 -> main@valTemp(2), 
  2528 ;;  op              1   46[BANK0 ] PTR int 
  2529 ;;		 -> main@op(2), 
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;  msg             1   51[BANK0 ] PTR unsigned char 
  2532 ;;		 -> main@msg(40), 
  2533 ;;  teste           2   49[BANK0 ] int 
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2543 ;;      Params:         0       7       0       0       0
  2544 ;;      Locals:         0       3       0       0       0
  2545 ;;      Temps:          0       2       0       0       0
  2546 ;;      Totals:         0      12       0       0       0
  2547 ;;Total ram usage:       12 bytes
  2548 ;; Hardware stack levels used: 1
  2549 ;; Hardware stack levels required when called: 3
  2550 ;; This function calls:
  2551 ;;		_enviar
  2552 ;;		_enviarAck
  2553 ;;		_mostraSensores
  2554 ;;		_mostraTemp
  2555 ;;		_sensor
  2556 ;;		_stringToInt
  2557 ;;		_strstr
  2558 ;; This function is called by:
  2559 ;;		_main
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           
  2564                           ;psect for function _checkXML
  2565  05E6                     _checkXML:
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _checkXML: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2569                           ;checkXML@msg stored from wreg
  2570  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  2571  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  2572  05E8  00D3               	movwf	checkXML@msg
  2573  05E9                     l1836:
  2574                           
  2575                           ;main.c: 214:     int teste;;main.c: 215:     if (!*op) {
  2576  05E9  084E               	movf	checkXML@op,w
  2577  05EA  0084               	movwf	4
  2578  05EB  1383               	bcf	3,7	;select IRP bank0
  2579  05EC  0800               	movf	0,w
  2580  05ED  00CF               	movwf	??_checkXML
  2581  05EE  0A84               	incf	4,f
  2582  05EF  0800               	movf	0,w
  2583  05F0  00D0               	movwf	??_checkXML+1
  2584  05F1  084F               	movf	??_checkXML,w
  2585  05F2  0450               	iorwf	??_checkXML+1,w
  2586  05F3  1D03               	btfss	3,2
  2587  05F4  2DF6               	goto	u1331
  2588  05F5  2DF7               	goto	u1330
  2589  05F6                     u1331:
  2590  05F6  2ECB               	goto	l1870
  2591  05F7                     u1330:
  2592  05F7                     l1838:
  2593                           
  2594                           ;main.c: 216:         if (strstr(msg, "<lim>") != (0)) {
  2595  05F7  30C4               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2596  05F8  00CF               	movwf	??_checkXML
  2597  05F9  084F               	movf	??_checkXML,w
  2598  05FA  00FA               	movwf	strstr@s2
  2599  05FB  0853               	movf	checkXML@msg,w
  2600  05FC  120A  118A  21BA  120A  118A  	fcall	_strstr
  2601  0601  3A00               	xorlw	0
  2602  0602  1903               	skipnz
  2603  0603  2E05               	goto	u1341
  2604  0604  2E06               	goto	u1340
  2605  0605                     u1341:
  2606  0605  2E11               	goto	l1842
  2607  0606                     u1340:
  2608  0606                     l1840:
  2609                           
  2610                           ;main.c: 217:             *op = 1;
  2611  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0608  084E               	movf	checkXML@op,w
  2614  0609  0084               	movwf	4
  2615  060A  3001               	movlw	1
  2616  060B  1383               	bcf	3,7	;select IRP bank0
  2617  060C  0080               	movwf	0
  2618  060D  0A84               	incf	4,f
  2619  060E  3000               	movlw	0
  2620  060F  0080               	movwf	0
  2621                           
  2622                           ;main.c: 218:         } else if (strstr(msg, "<min>") != (0)) {
  2623  0610  2FF2               	goto	l194
  2624  0611                     l1842:
  2625  0611  30D0               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2626  0612  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0613  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0614  00CF               	movwf	??_checkXML
  2629  0615  084F               	movf	??_checkXML,w
  2630  0616  00FA               	movwf	strstr@s2
  2631  0617  0853               	movf	checkXML@msg,w
  2632  0618  120A  118A  21BA  120A  118A  	fcall	_strstr
  2633  061D  3A00               	xorlw	0
  2634  061E  1903               	skipnz
  2635  061F  2E21               	goto	u1351
  2636  0620  2E22               	goto	u1350
  2637  0621                     u1351:
  2638  0621  2E2D               	goto	l1846
  2639  0622                     u1350:
  2640  0622                     l1844:
  2641                           
  2642                           ;main.c: 219:             *op = 2;
  2643  0622  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0623  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0624  084E               	movf	checkXML@op,w
  2646  0625  0084               	movwf	4
  2647  0626  3002               	movlw	2
  2648  0627  1383               	bcf	3,7	;select IRP bank0
  2649  0628  0080               	movwf	0
  2650  0629  0A84               	incf	4,f
  2651  062A  3000               	movlw	0
  2652  062B  0080               	movwf	0
  2653                           
  2654                           ;main.c: 220:         } else if (strstr(msg, "<mod>") != (0)) {
  2655  062C  2FF2               	goto	l194
  2656  062D                     l1846:
  2657  062D  30BE               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2658  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2659  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0630  00CF               	movwf	??_checkXML
  2661  0631  084F               	movf	??_checkXML,w
  2662  0632  00FA               	movwf	strstr@s2
  2663  0633  0853               	movf	checkXML@msg,w
  2664  0634  120A  118A  21BA  120A  118A  	fcall	_strstr
  2665  0639  3A00               	xorlw	0
  2666  063A  1903               	skipnz
  2667  063B  2E3D               	goto	u1361
  2668  063C  2E3E               	goto	u1360
  2669  063D                     u1361:
  2670  063D  2E49               	goto	l1850
  2671  063E                     u1360:
  2672  063E                     l1848:
  2673                           
  2674                           ;main.c: 221:             *op = 3;
  2675  063E  1283               	bcf	3,5	;RP0=0, select bank0
  2676  063F  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0640  084E               	movf	checkXML@op,w
  2678  0641  0084               	movwf	4
  2679  0642  3003               	movlw	3
  2680  0643  1383               	bcf	3,7	;select IRP bank0
  2681  0644  0080               	movwf	0
  2682  0645  0A84               	incf	4,f
  2683  0646  3000               	movlw	0
  2684  0647  0080               	movwf	0
  2685                           
  2686                           ;main.c: 222:         } else if (strstr(msg, "<mon>") != (0)) {
  2687  0648  2FF2               	goto	l194
  2688  0649                     l1850:
  2689  0649  30D6               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2690  064A  1283               	bcf	3,5	;RP0=0, select bank0
  2691  064B  1303               	bcf	3,6	;RP1=0, select bank0
  2692  064C  00CF               	movwf	??_checkXML
  2693  064D  084F               	movf	??_checkXML,w
  2694  064E  00FA               	movwf	strstr@s2
  2695  064F  0853               	movf	checkXML@msg,w
  2696  0650  120A  118A  21BA  120A  118A  	fcall	_strstr
  2697  0655  3A00               	xorlw	0
  2698  0656  1903               	skipnz
  2699  0657  2E59               	goto	u1371
  2700  0658  2E5A               	goto	u1370
  2701  0659                     u1371:
  2702  0659  2E65               	goto	l1854
  2703  065A                     u1370:
  2704  065A                     l1852:
  2705                           
  2706                           ;main.c: 223:             *op = 4;
  2707  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2708  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2709  065C  084E               	movf	checkXML@op,w
  2710  065D  0084               	movwf	4
  2711  065E  3004               	movlw	4
  2712  065F  1383               	bcf	3,7	;select IRP bank0
  2713  0660  0080               	movwf	0
  2714  0661  0A84               	incf	4,f
  2715  0662  3000               	movlw	0
  2716  0663  0080               	movwf	0
  2717                           
  2718                           ;main.c: 224:         } else if (strstr(msg, "<sen>") != (0)) {
  2719  0664  2FF2               	goto	l194
  2720  0665                     l1854:
  2721  0665  30CA               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2722  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2723  0667  1303               	bcf	3,6	;RP1=0, select bank0
  2724  0668  00CF               	movwf	??_checkXML
  2725  0669  084F               	movf	??_checkXML,w
  2726  066A  00FA               	movwf	strstr@s2
  2727  066B  0853               	movf	checkXML@msg,w
  2728  066C  120A  118A  21BA  120A  118A  	fcall	_strstr
  2729  0671  3A00               	xorlw	0
  2730  0672  1903               	skipnz
  2731  0673  2E75               	goto	u1381
  2732  0674  2E76               	goto	u1380
  2733  0675                     u1381:
  2734  0675  2E81               	goto	l1858
  2735  0676                     u1380:
  2736  0676                     l1856:
  2737                           
  2738                           ;main.c: 225:             *op = 5;
  2739  0676  1283               	bcf	3,5	;RP0=0, select bank0
  2740  0677  1303               	bcf	3,6	;RP1=0, select bank0
  2741  0678  084E               	movf	checkXML@op,w
  2742  0679  0084               	movwf	4
  2743  067A  3005               	movlw	5
  2744  067B  1383               	bcf	3,7	;select IRP bank0
  2745  067C  0080               	movwf	0
  2746  067D  0A84               	incf	4,f
  2747  067E  3000               	movlw	0
  2748  067F  0080               	movwf	0
  2749                           
  2750                           ;main.c: 226:         } else if (strstr(msg, "<tmp>") != (0)) {
  2751  0680  2FF2               	goto	l194
  2752  0681                     l1858:
  2753  0681  30DC               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2754  0682  1283               	bcf	3,5	;RP0=0, select bank0
  2755  0683  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0684  00CF               	movwf	??_checkXML
  2757  0685  084F               	movf	??_checkXML,w
  2758  0686  00FA               	movwf	strstr@s2
  2759  0687  0853               	movf	checkXML@msg,w
  2760  0688  120A  118A  21BA  120A  118A  	fcall	_strstr
  2761  068D  3A00               	xorlw	0
  2762  068E  1903               	skipnz
  2763  068F  2E91               	goto	u1391
  2764  0690  2E92               	goto	u1390
  2765  0691                     u1391:
  2766  0691  2E9D               	goto	l1862
  2767  0692                     u1390:
  2768  0692                     l1860:
  2769                           
  2770                           ;main.c: 227:             *op = 6;
  2771  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2772  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2773  0694  084E               	movf	checkXML@op,w
  2774  0695  0084               	movwf	4
  2775  0696  3006               	movlw	6
  2776  0697  1383               	bcf	3,7	;select IRP bank0
  2777  0698  0080               	movwf	0
  2778  0699  0A84               	incf	4,f
  2779  069A  3000               	movlw	0
  2780  069B  0080               	movwf	0
  2781                           
  2782                           ;main.c: 228:         } else if (strstr(msg, "<mxt>") != (0)) {
  2783  069C  2FF2               	goto	l194
  2784  069D                     l1862:
  2785  069D  30E2               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2786  069E  1283               	bcf	3,5	;RP0=0, select bank0
  2787  069F  1303               	bcf	3,6	;RP1=0, select bank0
  2788  06A0  00CF               	movwf	??_checkXML
  2789  06A1  084F               	movf	??_checkXML,w
  2790  06A2  00FA               	movwf	strstr@s2
  2791  06A3  0853               	movf	checkXML@msg,w
  2792  06A4  120A  118A  21BA  120A  118A  	fcall	_strstr
  2793  06A9  3A00               	xorlw	0
  2794  06AA  1903               	skipnz
  2795  06AB  2EAD               	goto	u1401
  2796  06AC  2EAE               	goto	u1400
  2797  06AD                     u1401:
  2798  06AD  2EB9               	goto	l1866
  2799  06AE                     u1400:
  2800  06AE                     l1864:
  2801                           
  2802                           ;main.c: 229:             *op = 7;
  2803  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2804  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  2805  06B0  084E               	movf	checkXML@op,w
  2806  06B1  0084               	movwf	4
  2807  06B2  3007               	movlw	7
  2808  06B3  1383               	bcf	3,7	;select IRP bank0
  2809  06B4  0080               	movwf	0
  2810  06B5  0A84               	incf	4,f
  2811  06B6  3000               	movlw	0
  2812  06B7  0080               	movwf	0
  2813                           
  2814                           ;main.c: 230:         } else {
  2815  06B8  2FF2               	goto	l194
  2816  06B9                     l1866:
  2817                           
  2818                           ;main.c: 231:             *op = 0;
  2819  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  2820  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  2821  06BB  084E               	movf	checkXML@op,w
  2822  06BC  0084               	movwf	4
  2823  06BD  1383               	bcf	3,7	;select IRP bank0
  2824  06BE  0180               	clrf	0
  2825  06BF  0A84               	incf	4,f
  2826  06C0  0180               	clrf	0
  2827  06C1                     l1868:
  2828                           
  2829                           ;main.c: 232:             enviar("<wrn>\n\tError 1\n</wrn>\n");
  2830  06C1  3042               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2831  06C2  00F1               	movwf	enviar@msg
  2832  06C3  3080               	movlw	128
  2833  06C4  00F2               	movwf	enviar@msg+1
  2834  06C5  120A  158A  277A  120A  118A  	fcall	_enviar
  2835  06CA  2FF2               	goto	l194
  2836  06CB                     l1870:
  2837                           
  2838                           ;main.c: 235:         if (strstr(msg, "</") != (0)) {
  2839  06CB  30E8               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2840  06CC  00CF               	movwf	??_checkXML
  2841  06CD  084F               	movf	??_checkXML,w
  2842  06CE  00FA               	movwf	strstr@s2
  2843  06CF  0853               	movf	checkXML@msg,w
  2844  06D0  120A  118A  21BA  120A  118A  	fcall	_strstr
  2845  06D5  3A00               	xorlw	0
  2846  06D6  1903               	skipnz
  2847  06D7  2ED9               	goto	u1411
  2848  06D8  2EDA               	goto	u1410
  2849  06D9                     u1411:
  2850  06D9  2FE0               	goto	l1924
  2851  06DA                     u1410:
  2852  06DA  2FBA               	goto	l1922
  2853  06DB                     l1874:
  2854  06DB  084D               	movf	checkXML@valTemp,w
  2855  06DC  0084               	movwf	4
  2856  06DD  0800               	movf	0,w
  2857  06DE  00CF               	movwf	??_checkXML
  2858  06DF  0A84               	incf	4,f
  2859  06E0  0800               	movf	0,w
  2860  06E1  00D0               	movwf	??_checkXML+1
  2861  06E2  0848               	movf	checkXML@limit,w
  2862  06E3  0084               	movwf	4
  2863  06E4  084F               	movf	??_checkXML,w
  2864  06E5  0080               	movwf	0
  2865  06E6  0A84               	incf	4,f
  2866  06E7  0850               	movf	??_checkXML+1,w
  2867  06E8  0080               	movwf	0
  2868                           
  2869                           ;main.c: 238:                     *op = 0;
  2870  06E9  084E               	movf	checkXML@op,w
  2871  06EA  0084               	movwf	4
  2872  06EB  0180               	clrf	0
  2873  06EC  0A84               	incf	4,f
  2874  06ED  0180               	clrf	0
  2875  06EE                     l1876:
  2876                           
  2877                           ;main.c: 239:                     enviarAck();
  2878  06EE  120A  158A  2619  120A  118A  	fcall	_enviarAck
  2879                           
  2880                           ;main.c: 240:                     break;
  2881  06F3  2FF2               	goto	l194
  2882  06F4                     l1878:
  2883  06F4  084D               	movf	checkXML@valTemp,w
  2884  06F5  0084               	movwf	4
  2885  06F6  0800               	movf	0,w
  2886  06F7  00CF               	movwf	??_checkXML
  2887  06F8  0A84               	incf	4,f
  2888  06F9  0800               	movf	0,w
  2889  06FA  00D0               	movwf	??_checkXML+1
  2890  06FB  0849               	movf	checkXML@night,w
  2891  06FC  0084               	movwf	4
  2892  06FD  084F               	movf	??_checkXML,w
  2893  06FE  0080               	movwf	0
  2894  06FF  0A84               	incf	4,f
  2895  0700  0850               	movf	??_checkXML+1,w
  2896  0701  0080               	movwf	0
  2897                           
  2898                           ;main.c: 242:                     *op = 0;
  2899  0702  084E               	movf	checkXML@op,w
  2900  0703  0084               	movwf	4
  2901  0704  0180               	clrf	0
  2902  0705  0A84               	incf	4,f
  2903  0706  0180               	clrf	0
  2904  0707  2EEE               	goto	l1876
  2905  0708                     l1882:
  2906  0708  084D               	movf	checkXML@valTemp,w
  2907  0709  0084               	movwf	4
  2908  070A  0800               	movf	0,w
  2909  070B  00D1               	movwf	checkXML@teste
  2910  070C  0A84               	incf	4,f
  2911  070D  0800               	movf	0,w
  2912  070E  00D2               	movwf	checkXML@teste+1
  2913  070F                     l1884:
  2914                           
  2915                           ;main.c: 246:                     if (teste == 1 || teste == 0) {
  2916  070F  0351               	decf	checkXML@teste,w
  2917  0710  0452               	iorwf	checkXML@teste+1,w
  2918  0711  1903               	btfsc	3,2
  2919  0712  2F14               	goto	u1421
  2920  0713  2F15               	goto	u1420
  2921  0714                     u1421:
  2922  0714  2F1B               	goto	l1888
  2923  0715                     u1420:
  2924  0715                     l1886:
  2925  0715  0851               	movf	checkXML@teste,w
  2926  0716  0452               	iorwf	checkXML@teste+1,w
  2927  0717  1D03               	btfss	3,2
  2928  0718  2F1A               	goto	u1431
  2929  0719  2F1B               	goto	u1430
  2930  071A                     u1431:
  2931  071A  2F28               	goto	l1892
  2932  071B                     u1430:
  2933  071B                     l1888:
  2934                           
  2935                           ;main.c: 247:                         *mode = teste;
  2936  071B  084A               	movf	checkXML@mode,w
  2937  071C  0084               	movwf	4
  2938  071D  0851               	movf	checkXML@teste,w
  2939  071E  0080               	movwf	0
  2940  071F  0A84               	incf	4,f
  2941  0720  0852               	movf	checkXML@teste+1,w
  2942  0721  0080               	movwf	0
  2943  0722                     l1890:
  2944                           
  2945                           ;main.c: 248:                         enviarAck();
  2946  0722  120A  158A  2619  120A  118A  	fcall	_enviarAck
  2947                           
  2948                           ;main.c: 249:                     } else {
  2949  0727  2F31               	goto	l1894
  2950  0728                     l1892:
  2951                           
  2952                           ;main.c: 250:                         enviar("<wrn>\n\tError 2\n</wrn>\n");
  2953  0728  3059               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2954  0729  00F1               	movwf	enviar@msg
  2955  072A  3080               	movlw	128
  2956  072B  00F2               	movwf	enviar@msg+1
  2957  072C  120A  158A  277A  120A  118A  	fcall	_enviar
  2958  0731                     l1894:
  2959                           
  2960                           ;main.c: 252:                     *op = 0;
  2961  0731  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0732  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0733  084E               	movf	checkXML@op,w
  2964  0734  0084               	movwf	4
  2965  0735  1383               	bcf	3,7	;select IRP bank0
  2966  0736  0180               	clrf	0
  2967  0737  0A84               	incf	4,f
  2968  0738  0180               	clrf	0
  2969                           
  2970                           ;main.c: 253:                     break;
  2971  0739  2FF2               	goto	l194
  2972  073A                     l1896:
  2973  073A  084D               	movf	checkXML@valTemp,w
  2974  073B  0084               	movwf	4
  2975  073C  0800               	movf	0,w
  2976  073D  00D1               	movwf	checkXML@teste
  2977  073E  0A84               	incf	4,f
  2978  073F  0800               	movf	0,w
  2979  0740  00D2               	movwf	checkXML@teste+1
  2980  0741                     l1898:
  2981                           
  2982                           ;main.c: 255:                     if (teste == 1 || teste == 0) {
  2983  0741  0351               	decf	checkXML@teste,w
  2984  0742  0452               	iorwf	checkXML@teste+1,w
  2985  0743  1903               	btfsc	3,2
  2986  0744  2F46               	goto	u1441
  2987  0745  2F47               	goto	u1440
  2988  0746                     u1441:
  2989  0746  2F4D               	goto	l1902
  2990  0747                     u1440:
  2991  0747                     l1900:
  2992  0747  0851               	movf	checkXML@teste,w
  2993  0748  0452               	iorwf	checkXML@teste+1,w
  2994  0749  1D03               	btfss	3,2
  2995  074A  2F4C               	goto	u1451
  2996  074B  2F4D               	goto	u1450
  2997  074C                     u1451:
  2998  074C  2F55               	goto	l1906
  2999  074D                     u1450:
  3000  074D                     l1902:
  3001                           
  3002                           ;main.c: 256:                         *monitorizacao = teste;
  3003  074D  084B               	movf	checkXML@monitorizacao,w
  3004  074E  0084               	movwf	4
  3005  074F  0851               	movf	checkXML@teste,w
  3006  0750  0080               	movwf	0
  3007  0751  0A84               	incf	4,f
  3008  0752  0852               	movf	checkXML@teste+1,w
  3009  0753  0080               	movwf	0
  3010  0754  2F22               	goto	l1890
  3011  0755                     l1906:
  3012                           
  3013                           ;main.c: 259:                         enviar("<wrn>\n\tError 2\n</wrn>\n");
  3014  0755  3059               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  3015  0756  00F1               	movwf	enviar@msg
  3016  0757  3080               	movlw	128
  3017  0758  00F2               	movwf	enviar@msg+1
  3018  0759  120A  158A  277A  120A  118A  	fcall	_enviar
  3019  075E  2F31               	goto	l1894
  3020  075F                     l1910:
  3021  075F  084E               	movf	checkXML@op,w
  3022  0760  0084               	movwf	4
  3023  0761  0180               	clrf	0
  3024  0762  0A84               	incf	4,f
  3025  0763  0180               	clrf	0
  3026  0764                     l1912:
  3027                           
  3028                           ;main.c: 264:                     mostraSensores(sensor(0), sensor(1));
  3029  0764  3000               	movlw	0
  3030  0765  00F0               	movwf	sensor@chanel
  3031  0766  00F1               	movwf	sensor@chanel+1
  3032  0767  120A  118A  2262  120A  118A  	fcall	_sensor
  3033  076C  0871               	movf	?_sensor+1,w
  3034  076D  1283               	bcf	3,5	;RP0=0, select bank0
  3035  076E  1303               	bcf	3,6	;RP1=0, select bank0
  3036  076F  00B0               	movwf	mostraSensores@valLeft+1
  3037  0770  0870               	movf	?_sensor,w
  3038  0771  00AF               	movwf	mostraSensores@valLeft
  3039  0772  3001               	movlw	1
  3040  0773  00F0               	movwf	sensor@chanel
  3041  0774  3000               	movlw	0
  3042  0775  00F1               	movwf	sensor@chanel+1
  3043  0776  120A  118A  2262  120A  118A  	fcall	_sensor
  3044  077B  0871               	movf	?_sensor+1,w
  3045  077C  1283               	bcf	3,5	;RP0=0, select bank0
  3046  077D  1303               	bcf	3,6	;RP1=0, select bank0
  3047  077E  00B2               	movwf	mostraSensores@valRight+1
  3048  077F  0870               	movf	?_sensor,w
  3049  0780  00B1               	movwf	mostraSensores@valRight
  3050  0781  120A  158A  266D  120A  118A  	fcall	_mostraSensores
  3051                           
  3052                           ;main.c: 265:                     break;
  3053  0786  2FF2               	goto	l194
  3054  0787                     l1914:
  3055  0787  3002               	movlw	2
  3056  0788  00F0               	movwf	sensor@chanel
  3057  0789  3000               	movlw	0
  3058  078A  00F1               	movwf	sensor@chanel+1
  3059  078B  120A  118A  2262  120A  118A  	fcall	_sensor
  3060  0790  0871               	movf	?_sensor+1,w
  3061  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0792  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0793  00B0               	movwf	mostraTemp@valTemp+1
  3064  0794  0870               	movf	?_sensor,w
  3065  0795  00AF               	movwf	mostraTemp@valTemp
  3066  0796  120A  158A  2653  120A  118A  	fcall	_mostraTemp
  3067  079B  2F31               	goto	l1894
  3068  079C                     l1918:
  3069  079C  084D               	movf	checkXML@valTemp,w
  3070  079D  0084               	movwf	4
  3071  079E  0800               	movf	0,w
  3072  079F  00CF               	movwf	??_checkXML
  3073  07A0  0A84               	incf	4,f
  3074  07A1  0800               	movf	0,w
  3075  07A2  00D0               	movwf	??_checkXML+1
  3076  07A3  084C               	movf	checkXML@temperature,w
  3077  07A4  0084               	movwf	4
  3078  07A5  084F               	movf	??_checkXML,w
  3079  07A6  0080               	movwf	0
  3080  07A7  0A84               	incf	4,f
  3081  07A8  0850               	movf	??_checkXML+1,w
  3082  07A9  0080               	movwf	0
  3083                           
  3084                           ;main.c: 270:                     *op = 0;
  3085  07AA  084E               	movf	checkXML@op,w
  3086  07AB  0084               	movwf	4
  3087  07AC  0180               	clrf	0
  3088  07AD  0A84               	incf	4,f
  3089  07AE  0180               	clrf	0
  3090                           
  3091                           ;main.c: 271:                     break;
  3092  07AF  2FF2               	goto	l194
  3093  07B0                     l1920:
  3094  07B0  3042               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3095  07B1  00F1               	movwf	enviar@msg
  3096  07B2  3080               	movlw	128
  3097  07B3  00F2               	movwf	enviar@msg+1
  3098  07B4  120A  158A  277A  120A  118A  	fcall	_enviar
  3099                           
  3100                           ;main.c: 273:             }
  3101  07B9  2FF2               	goto	l194
  3102  07BA                     l1922:
  3103  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3104  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  3105  07BC  084E               	movf	checkXML@op,w
  3106  07BD  0084               	movwf	4
  3107  07BE  1383               	bcf	3,7	;select IRP bank0
  3108  07BF  0800               	movf	0,w
  3109  07C0  00CF               	movwf	??_checkXML
  3110  07C1  0A84               	incf	4,f
  3111  07C2  0800               	movf	0,w
  3112  07C3  00D0               	movwf	??_checkXML+1
  3113                           
  3114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3115                           ; Switch size 1, requested type "simple"
  3116                           ; Number of cases is 1, Range of values is 0 to 0
  3117                           ; switch strategies available:
  3118                           ; Name         Instructions Cycles
  3119                           ; simple_byte            4     3 (average)
  3120                           ; direct_byte           11     8 (fixed)
  3121                           ; jumptable            260     6 (fixed)
  3122                           ;	Chosen strategy is simple_byte
  3123  07C4  0850               	movf	??_checkXML+1,w
  3124  07C5  3A00               	xorlw	0	; case 0
  3125  07C6  1903               	skipnz
  3126  07C7  2FC9               	goto	l2064
  3127  07C8  2FB0               	goto	l1920
  3128  07C9                     l2064:
  3129                           
  3130                           ; Switch size 1, requested type "simple"
  3131                           ; Number of cases is 7, Range of values is 1 to 7
  3132                           ; switch strategies available:
  3133                           ; Name         Instructions Cycles
  3134                           ; simple_byte           22    12 (average)
  3135                           ; direct_byte           32    11 (fixed)
  3136                           ; jumptable            263     9 (fixed)
  3137                           ;	Chosen strategy is simple_byte
  3138  07C9  084F               	movf	??_checkXML,w
  3139  07CA  3A01               	xorlw	1	; case 1
  3140  07CB  1903               	skipnz
  3141  07CC  2EDB               	goto	l1874
  3142  07CD  3A03               	xorlw	3	; case 2
  3143  07CE  1903               	skipnz
  3144  07CF  2EF4               	goto	l1878
  3145  07D0  3A01               	xorlw	1	; case 3
  3146  07D1  1903               	skipnz
  3147  07D2  2F08               	goto	l1882
  3148  07D3  3A07               	xorlw	7	; case 4
  3149  07D4  1903               	skipnz
  3150  07D5  2F3A               	goto	l1896
  3151  07D6  3A01               	xorlw	1	; case 5
  3152  07D7  1903               	skipnz
  3153  07D8  2F5F               	goto	l1910
  3154  07D9  3A03               	xorlw	3	; case 6
  3155  07DA  1903               	skipnz
  3156  07DB  2F87               	goto	l1914
  3157  07DC  3A01               	xorlw	1	; case 7
  3158  07DD  1903               	skipnz
  3159  07DE  2F9C               	goto	l1918
  3160  07DF  2FB0               	goto	l1920
  3161  07E0                     l1924:
  3162                           
  3163                           ;main.c: 275:             *valTemp = stringToInt(msg);
  3164  07E0  1283               	bcf	3,5	;RP0=0, select bank0
  3165  07E1  1303               	bcf	3,6	;RP1=0, select bank0
  3166  07E2  0853               	movf	checkXML@msg,w
  3167  07E3  120A  118A  220D  120A  118A  	fcall	_stringToInt
  3168  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  3169  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  3170  07EA  084D               	movf	checkXML@valTemp,w
  3171  07EB  0084               	movwf	4
  3172  07EC  0876               	movf	?_stringToInt,w
  3173  07ED  1383               	bcf	3,7	;select IRP bank0
  3174  07EE  0080               	movwf	0
  3175  07EF  0A84               	incf	4,f
  3176  07F0  0877               	movf	?_stringToInt+1,w
  3177  07F1  0080               	movwf	0
  3178  07F2                     l194:
  3179  07F2  0008               	return
  3180  07F3                     __end_of_checkXML:
  3181                           
  3182                           	psect	text12
  3183  01BA                     __ptext12:	
  3184 ;; *************** function _strstr *****************
  3185 ;; Defined at:
  3186 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strstr.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  s1              1    wreg     PTR const unsigned char 
  3189 ;;		 -> main@msg(40), NULL(0), 
  3190 ;;  s2              1   10[COMMON] PTR const unsigned char 
  3191 ;;		 -> STR_15(3), STR_13(6), STR_12(6), STR_11(6), 
  3192 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(6), 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;  s1              1    0[BANK0 ] PTR const unsigned char 
  3195 ;;		 -> main@msg(40), NULL(0), 
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      PTR unsigned char 
  3198 ;; Registers used:
  3199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3205 ;;      Params:         1       0       0       0       0
  3206 ;;      Locals:         0       1       0       0       0
  3207 ;;      Temps:          3       0       0       0       0
  3208 ;;      Totals:         4       1       0       0       0
  3209 ;;Total ram usage:        5 bytes
  3210 ;; Hardware stack levels used: 1
  3211 ;; Hardware stack levels required when called: 2
  3212 ;; This function calls:
  3213 ;;		_strchr
  3214 ;;		_strlen
  3215 ;;		_strncmp
  3216 ;; This function is called by:
  3217 ;;		_checkXML
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _strstr
  3223  01BA                     _strstr:
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _strstr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3227                           ;strstr@s1 stored from wreg
  3228  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  3229  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  3230  01BC  00A0               	movwf	strstr@s1
  3231  01BD                     l1714:
  3232  01BD  29FE               	goto	l1724
  3233  01BE                     l1716:
  3234  01BE  087A               	movf	strstr@s2,w
  3235  01BF  00FB               	movwf	??_strstr
  3236  01C0  087B               	movf	??_strstr,w
  3237  01C1  00F4               	movwf	strncmp@s2
  3238  01C2  087A               	movf	strstr@s2,w
  3239  01C3  00F0               	movwf	strlen@s
  3240  01C4  3000               	movlw	0
  3241  01C5  1D03               	btfss	3,2
  3242  01C6  3080               	movlw	128
  3243  01C7  00F1               	movwf	strlen@s+1
  3244  01C8  120A  158A  268B  120A  118A  	fcall	_strlen
  3245  01CD  0871               	movf	?_strlen+1,w
  3246  01CE  00F6               	movwf	strncmp@len+1
  3247  01CF  0870               	movf	?_strlen,w
  3248  01D0  00F5               	movwf	strncmp@len
  3249  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  3250  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  3251  01D3  0820               	movf	strstr@s1,w
  3252  01D4  120A  118A  212B  120A  118A  	fcall	_strncmp
  3253  01D9  0874               	movf	?_strncmp,w
  3254  01DA  0475               	iorwf	?_strncmp+1,w
  3255  01DB  1D03               	btfss	3,2
  3256  01DC  29DE               	goto	u1141
  3257  01DD  29DF               	goto	u1140
  3258  01DE                     u1141:
  3259  01DE  29E3               	goto	l1722
  3260  01DF                     u1140:
  3261  01DF                     l1718:
  3262  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  3263  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  3264  01E1  0820               	movf	strstr@s1,w
  3265  01E2  2A0C               	goto	l790
  3266  01E3                     l1722:
  3267  01E3  087A               	movf	strstr@s2,w
  3268  01E4  0084               	movwf	4
  3269  01E5  120A  118A  200D  120A  118A  	fcall	stringdir
  3270  01EA  00FB               	movwf	??_strstr
  3271  01EB  01FC               	clrf	??_strstr+1
  3272  01EC  087B               	movf	??_strstr,w
  3273  01ED  00F0               	movwf	strchr@chr
  3274  01EE  087C               	movf	??_strstr+1,w
  3275  01EF  00F1               	movwf	strchr@chr+1
  3276  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  3277  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  3278  01F2  0820               	movf	strstr@s1,w
  3279  01F3  3E01               	addlw	1
  3280  01F4  120A  158A  263C  120A  118A  	fcall	_strchr
  3281  01F9  00FD               	movwf	??_strstr+2
  3282  01FA  087D               	movf	??_strstr+2,w
  3283  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3284  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3285  01FD  00A0               	movwf	strstr@s1
  3286  01FE                     l1724:
  3287  01FE  0820               	movf	strstr@s1,w
  3288  01FF  1903               	btfsc	3,2
  3289  0200  2A02               	goto	u1151
  3290  0201  2A03               	goto	u1150
  3291  0202                     u1151:
  3292  0202  2A0B               	goto	l1728
  3293  0203                     u1150:
  3294  0203                     l1726:
  3295  0203  0820               	movf	strstr@s1,w
  3296  0204  0084               	movwf	4
  3297  0205  1383               	bcf	3,7	;select IRP bank0
  3298  0206  0800               	movf	0,w
  3299  0207  1D03               	btfss	3,2
  3300  0208  2A0A               	goto	u1161
  3301  0209  2A0B               	goto	u1160
  3302  020A                     u1161:
  3303  020A  29BE               	goto	l1716
  3304  020B                     u1160:
  3305  020B                     l1728:
  3306  020B  3000               	movlw	0
  3307  020C                     l790:
  3308  020C  0008               	return
  3309  020D                     __end_of_strstr:
  3310                           
  3311                           	psect	text13
  3312  012B                     __ptext13:	
  3313 ;; *************** function _strncmp *****************
  3314 ;; Defined at:
  3315 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strncmp.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  s1              1    wreg     PTR const unsigned char 
  3318 ;;		 -> main@msg(40), NULL(0), 
  3319 ;;  s2              1    4[COMMON] PTR const unsigned char 
  3320 ;;		 -> STR_15(3), STR_13(6), STR_12(6), STR_11(6), 
  3321 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(6), 
  3322 ;;  len             2    5[COMMON] unsigned int 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  s1              1    9[COMMON] PTR const unsigned char 
  3325 ;;		 -> main@msg(40), NULL(0), 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2    4[COMMON] int 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3335 ;;      Params:         3       0       0       0       0
  3336 ;;      Locals:         1       0       0       0       0
  3337 ;;      Temps:          2       0       0       0       0
  3338 ;;      Totals:         6       0       0       0       0
  3339 ;;Total ram usage:        6 bytes
  3340 ;; Hardware stack levels used: 2
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_strstr
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _strncmp
  3350  012B                     _strncmp:
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  3354                           ;strncmp@s1 stored from wreg
  3355  012B  00F9               	movwf	strncmp@s1
  3356  012C                     l1608:
  3357  012C  2960               	goto	l802
  3358  012D                     l1610:
  3359  012D  0879               	movf	strncmp@s1,w
  3360  012E  0084               	movwf	4
  3361  012F  1383               	bcf	3,7	;select IRP bank0
  3362  0130  0800               	movf	0,w
  3363  0131  1903               	btfsc	3,2
  3364  0132  2934               	goto	u1051
  3365  0133  2935               	goto	u1050
  3366  0134                     u1051:
  3367  0134  2945               	goto	l1614
  3368  0135                     u1050:
  3369  0135                     l1612:
  3370  0135  0874               	movf	strncmp@s2,w
  3371  0136  0084               	movwf	4
  3372  0137  120A  118A  200D  120A  118A  	fcall	stringdir
  3373  013C  00F7               	movwf	??_strncmp
  3374  013D  0879               	movf	strncmp@s1,w
  3375  013E  0084               	movwf	4
  3376  013F  0800               	movf	0,w
  3377  0140  0677               	xorwf	??_strncmp,w
  3378  0141  1903               	skipnz
  3379  0142  2944               	goto	u1061
  3380  0143  2945               	goto	u1060
  3381  0144                     u1061:
  3382  0144  2958               	goto	l1618
  3383  0145                     u1060:
  3384  0145                     l1614:
  3385  0145  0874               	movf	strncmp@s2,w
  3386  0146  0084               	movwf	4
  3387  0147  120A  118A  200D  120A  118A  	fcall	stringdir
  3388  014C  00F7               	movwf	??_strncmp
  3389  014D  0879               	movf	strncmp@s1,w
  3390  014E  0084               	movwf	4
  3391  014F  0800               	movf	0,w
  3392  0150  00F8               	movwf	??_strncmp+1
  3393  0151  0877               	movf	??_strncmp,w
  3394  0152  0278               	subwf	??_strncmp+1,w
  3395  0153  00F4               	movwf	?_strncmp
  3396  0154  01F5               	clrf	?_strncmp+1
  3397  0155  1C03               	skipc
  3398  0156  03F5               	decf	?_strncmp+1,f
  3399  0157  2970               	goto	l807
  3400  0158                     l1618:
  3401  0158  3001               	movlw	1
  3402  0159  00F7               	movwf	??_strncmp
  3403  015A  0877               	movf	??_strncmp,w
  3404  015B  07F9               	addwf	strncmp@s1,f
  3405  015C  3001               	movlw	1
  3406  015D  00F7               	movwf	??_strncmp
  3407  015E  0877               	movf	??_strncmp,w
  3408  015F  07F4               	addwf	strncmp@s2,f
  3409  0160                     l802:
  3410  0160  3001               	movlw	1
  3411  0161  02F5               	subwf	strncmp@len,f
  3412  0162  3000               	movlw	0
  3413  0163  1C03               	skipc
  3414  0164  03F6               	decf	strncmp@len+1,f
  3415  0165  02F6               	subwf	strncmp@len+1,f
  3416  0166  0A75               	incf	strncmp@len,w
  3417  0167  1D03               	skipz
  3418  0168  296D               	goto	u1071
  3419  0169  0A76               	incf	strncmp@len+1,w
  3420  016A  1D03               	btfss	3,2
  3421  016B  296D               	goto	u1071
  3422  016C  296E               	goto	u1070
  3423  016D                     u1071:
  3424  016D  292D               	goto	l1610
  3425  016E                     u1070:
  3426  016E                     l1620:
  3427  016E  01F4               	clrf	?_strncmp
  3428  016F  01F5               	clrf	?_strncmp+1
  3429  0170                     l807:
  3430  0170  0008               	return
  3431  0171                     __end_of_strncmp:
  3432                           
  3433                           	psect	text14
  3434  0E3C                     __ptext14:	
  3435 ;; *************** function _strchr *****************
  3436 ;; Defined at:
  3437 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strchr.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  ptr             1    wreg     PTR const unsigned char 
  3440 ;;		 -> main@msg(40), NULL(0), 
  3441 ;;  chr             2    0[COMMON] int 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  ptr             1    2[COMMON] PTR const unsigned char 
  3444 ;;		 -> main@msg(40), NULL(0), 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      PTR unsigned char 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3454 ;;      Params:         2       0       0       0       0
  3455 ;;      Locals:         1       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0
  3457 ;;      Totals:         3       0       0       0       0
  3458 ;;Total ram usage:        3 bytes
  3459 ;; Hardware stack levels used: 1
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_strstr
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _strchr
  3469  0E3C                     _strchr:
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _strchr: [wreg-fsr0h+status,2+status,0]
  3473                           ;strchr@ptr stored from wreg
  3474  0E3C  00F2               	movwf	strchr@ptr
  3475  0E3D                     l796:
  3476  0E3D                     l1624:
  3477  0E3D  0872               	movf	strchr@ptr,w
  3478  0E3E  0084               	movwf	4
  3479  0E3F  1383               	bcf	3,7	;select IRP bank0
  3480  0E40  0800               	movf	0,w
  3481  0E41  0670               	xorwf	strchr@chr,w
  3482  0E42  1D03               	skipz
  3483  0E43  2E45               	goto	u1081
  3484  0E44  2E46               	goto	u1080
  3485  0E45                     u1081:
  3486  0E45  2E48               	goto	l1630
  3487  0E46                     u1080:
  3488  0E46                     l1626:
  3489  0E46  0872               	movf	strchr@ptr,w
  3490  0E47  2E52               	goto	l798
  3491  0E48                     l1630:
  3492  0E48  0872               	movf	strchr@ptr,w
  3493  0E49  0084               	movwf	4
  3494  0E4A  3001               	movlw	1
  3495  0E4B  07F2               	addwf	strchr@ptr,f
  3496  0E4C  0800               	movf	0,w
  3497  0E4D  1D03               	btfss	3,2
  3498  0E4E  2E50               	goto	u1091
  3499  0E4F  2E51               	goto	u1090
  3500  0E50                     u1091:
  3501  0E50  2E3D               	goto	l796
  3502  0E51                     u1090:
  3503  0E51                     l1632:
  3504  0E51  3000               	movlw	0
  3505  0E52                     l798:
  3506  0E52  0008               	return
  3507  0E53                     __end_of_strchr:
  3508                           
  3509                           	psect	text15
  3510  020D                     __ptext15:	
  3511 ;; *************** function _stringToInt *****************
  3512 ;; Defined at:
  3513 ;;		line 159 in file "main.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  string          1    wreg     PTR unsigned char 
  3516 ;;		 -> main@msg(40), 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  string          1    4[BANK0 ] PTR unsigned char 
  3519 ;;		 -> main@msg(40), 
  3520 ;;  result          2    2[BANK0 ] int 
  3521 ;;  i               2    0[BANK0 ] int 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  2    6[COMMON] int 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3531 ;;      Params:         2       0       0       0       0
  3532 ;;      Locals:         0       5       0       0       0
  3533 ;;      Temps:          3       0       0       0       0
  3534 ;;      Totals:         5       5       0       0       0
  3535 ;;Total ram usage:       10 bytes
  3536 ;; Hardware stack levels used: 1
  3537 ;; Hardware stack levels required when called: 2
  3538 ;; This function calls:
  3539 ;;		___wmul
  3540 ;;		_strlen
  3541 ;; This function is called by:
  3542 ;;		_checkXML
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           
  3547                           ;psect for function _stringToInt
  3548  020D                     _stringToInt:
  3549                           
  3550                           ;incstack = 0
  3551                           ; Regs used in _stringToInt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3552                           ;stringToInt@string stored from wreg
  3553  020D  1283               	bcf	3,5	;RP0=0, select bank0
  3554  020E  1303               	bcf	3,6	;RP1=0, select bank0
  3555  020F  00A4               	movwf	stringToInt@string
  3556  0210                     l1666:
  3557                           
  3558                           ;main.c: 160:     int i, result = 0;
  3559  0210  01A2               	clrf	stringToInt@result
  3560  0211  01A3               	clrf	stringToInt@result+1
  3561                           
  3562                           ;main.c: 161:     for (i = 0; i < (strlen(string) - 1); i++) {
  3563  0212  01A0               	clrf	stringToInt@i
  3564  0213  01A1               	clrf	stringToInt@i+1
  3565  0214  2A40               	goto	l1672
  3566  0215                     l1668:
  3567                           
  3568                           ;main.c: 162:         result = 10 * result + (string[i] - '0');
  3569  0215  0820               	movf	stringToInt@i,w
  3570  0216  0724               	addwf	stringToInt@string,w
  3571  0217  00F8               	movwf	??_stringToInt
  3572  0218  0878               	movf	??_stringToInt,w
  3573  0219  0084               	movwf	4
  3574  021A  0823               	movf	stringToInt@result+1,w
  3575  021B  00F1               	movwf	___wmul@multiplier+1
  3576  021C  0822               	movf	stringToInt@result,w
  3577  021D  00F0               	movwf	___wmul@multiplier
  3578  021E  300A               	movlw	10
  3579  021F  00F2               	movwf	___wmul@multiplicand
  3580  0220  3000               	movlw	0
  3581  0221  00F3               	movwf	___wmul@multiplicand+1
  3582  0222  120A  158A  26AF  120A  118A  	fcall	___wmul
  3583  0227  1383               	bcf	3,7	;select IRP bank0
  3584  0228  0800               	movf	0,w
  3585  0229  0770               	addwf	?___wmul,w
  3586  022A  00F9               	movwf	??_stringToInt+1
  3587  022B  3000               	movlw	0
  3588  022C  1803               	skipnc
  3589  022D  3001               	movlw	1
  3590  022E  0771               	addwf	?___wmul+1,w
  3591  022F  00FA               	movwf	??_stringToInt+2
  3592  0230  0879               	movf	??_stringToInt+1,w
  3593  0231  3ED0               	addlw	208
  3594  0232  1283               	bcf	3,5	;RP0=0, select bank0
  3595  0233  1303               	bcf	3,6	;RP1=0, select bank0
  3596  0234  00A2               	movwf	stringToInt@result
  3597  0235  087A               	movf	??_stringToInt+2,w
  3598  0236  1803               	skipnc
  3599  0237  3E01               	addlw	1
  3600  0238  3EFF               	addlw	255
  3601  0239  00A3               	movwf	stringToInt@result+1
  3602  023A                     l1670:
  3603                           
  3604                           ;main.c: 163:     }
  3605  023A  3001               	movlw	1
  3606  023B  07A0               	addwf	stringToInt@i,f
  3607  023C  1803               	skipnc
  3608  023D  0AA1               	incf	stringToInt@i+1,f
  3609  023E  3000               	movlw	0
  3610  023F  07A1               	addwf	stringToInt@i+1,f
  3611  0240                     l1672:
  3612  0240  0824               	movf	stringToInt@string,w
  3613  0241  00F0               	movwf	strlen@s
  3614  0242  3000               	movlw	0
  3615  0243  00F1               	movwf	strlen@s+1
  3616  0244  120A  158A  268B  120A  118A  	fcall	_strlen
  3617  0249  0870               	movf	?_strlen,w
  3618  024A  3EFF               	addlw	255
  3619  024B  00F8               	movwf	??_stringToInt
  3620  024C  0871               	movf	?_strlen+1,w
  3621  024D  1803               	skipnc
  3622  024E  3E01               	addlw	1
  3623  024F  3EFF               	addlw	255
  3624  0250  00F9               	movwf	??_stringToInt+1
  3625  0251  0879               	movf	??_stringToInt+1,w
  3626  0252  1283               	bcf	3,5	;RP0=0, select bank0
  3627  0253  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0254  0221               	subwf	stringToInt@i+1,w
  3629  0255  1D03               	skipz
  3630  0256  2A59               	goto	u1125
  3631  0257  0878               	movf	??_stringToInt,w
  3632  0258  0220               	subwf	stringToInt@i,w
  3633  0259                     u1125:
  3634  0259  1C03               	skipc
  3635  025A  2A5C               	goto	u1121
  3636  025B  2A5D               	goto	u1120
  3637  025C                     u1121:
  3638  025C  2A15               	goto	l1668
  3639  025D                     u1120:
  3640  025D                     l1674:
  3641                           
  3642                           ;main.c: 165:     return result;
  3643  025D  0823               	movf	stringToInt@result+1,w
  3644  025E  00F7               	movwf	?_stringToInt+1
  3645  025F  0822               	movf	stringToInt@result,w
  3646  0260  00F6               	movwf	?_stringToInt
  3647  0261                     l130:
  3648  0261  0008               	return
  3649  0262                     __end_of_stringToInt:
  3650                           
  3651                           	psect	text16
  3652  0E8B                     __ptext16:	
  3653 ;; *************** function _strlen *****************
  3654 ;; Defined at:
  3655 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strlen.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  s               2    0[COMMON] PTR const unsigned char 
  3658 ;;		 -> main@msg(40), STR_15(3), STR_13(6), STR_12(6), 
  3659 ;;		 -> STR_11(6), STR_10(6), STR_9(6), STR_8(6), 
  3660 ;;		 -> STR_7(6), 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  cp              2    2[COMMON] PTR const unsigned char 
  3663 ;;		 -> main@msg(40), STR_15(3), STR_13(6), STR_12(6), 
  3664 ;;		 -> STR_11(6), STR_10(6), STR_9(6), STR_8(6), 
  3665 ;;		 -> STR_7(6), 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  2    0[COMMON] unsigned int 
  3668 ;; Registers used:
  3669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3675 ;;      Params:         2       0       0       0       0
  3676 ;;      Locals:         2       0       0       0       0
  3677 ;;      Temps:          0       0       0       0       0
  3678 ;;      Totals:         4       0       0       0       0
  3679 ;;Total ram usage:        4 bytes
  3680 ;; Hardware stack levels used: 2
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_stringToInt
  3685 ;;		_strstr
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           
  3690                           ;psect for function _strlen
  3691  0E8B                     _strlen:
  3692  0E8B                     l1522:	
  3693                           ;incstack = 0
  3694                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3695                           
  3696  0E8B  0870               	movf	strlen@s,w
  3697  0E8C  00F2               	movwf	strlen@cp
  3698  0E8D  0871               	movf	strlen@s+1,w
  3699  0E8E  00F3               	movwf	strlen@cp+1
  3700  0E8F  2E96               	goto	l1526
  3701  0E90                     l1524:
  3702  0E90  3001               	movlw	1
  3703  0E91  07F2               	addwf	strlen@cp,f
  3704  0E92  1803               	skipnc
  3705  0E93  0AF3               	incf	strlen@cp+1,f
  3706  0E94  3000               	movlw	0
  3707  0E95  07F3               	addwf	strlen@cp+1,f
  3708  0E96                     l1526:
  3709  0E96  0873               	movf	strlen@cp+1,w
  3710  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  3711  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  3712  0E99  00FF               	movwf	btemp+1
  3713  0E9A  0872               	movf	strlen@cp,w
  3714  0E9B  0084               	movwf	4
  3715  0E9C  120A  118A  2003  120A  158A  	fcall	stringtab
  3716  0EA1  3A00               	xorlw	0
  3717  0EA2  1D03               	skipz
  3718  0EA3  2EA5               	goto	u931
  3719  0EA4  2EA6               	goto	u930
  3720  0EA5                     u931:
  3721  0EA5  2E90               	goto	l1524
  3722  0EA6                     u930:
  3723  0EA6                     l1528:
  3724  0EA6  0870               	movf	strlen@s,w
  3725  0EA7  0272               	subwf	strlen@cp,w
  3726  0EA8  00F0               	movwf	?_strlen
  3727  0EA9  0871               	movf	strlen@s+1,w
  3728  0EAA  1C03               	skipc
  3729  0EAB  0A71               	incf	strlen@s+1,w
  3730  0EAC  0273               	subwf	strlen@cp+1,w
  3731  0EAD  00F1               	movwf	?_strlen+1
  3732  0EAE                     l778:
  3733  0EAE  0008               	return
  3734  0EAF                     __end_of_strlen:
  3735                           
  3736                           	psect	text17
  3737  0EAF                     __ptext17:	
  3738 ;; *************** function ___wmul *****************
  3739 ;; Defined at:
  3740 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  multiplier      2    0[COMMON] unsigned int 
  3743 ;;  multiplicand    2    2[COMMON] unsigned int 
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  product         2    4[COMMON] unsigned int 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  2    0[COMMON] unsigned int 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3755 ;;      Params:         4       0       0       0       0
  3756 ;;      Locals:         2       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0
  3758 ;;      Totals:         6       0       0       0       0
  3759 ;;Total ram usage:        6 bytes
  3760 ;; Hardware stack levels used: 1
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		_stringToInt
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function ___wmul
  3770  0EAF                     ___wmul:
  3771  0EAF                     l1594:	
  3772                           ;incstack = 0
  3773                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3774                           
  3775  0EAF  01F4               	clrf	___wmul@product
  3776  0EB0  01F5               	clrf	___wmul@product+1
  3777  0EB1                     l1596:
  3778  0EB1  1C70               	btfss	___wmul@multiplier,0
  3779  0EB2  2EB4               	goto	u1011
  3780  0EB3  2EB5               	goto	u1010
  3781  0EB4                     u1011:
  3782  0EB4  2EBB               	goto	l324
  3783  0EB5                     u1010:
  3784  0EB5                     l1598:
  3785  0EB5  0872               	movf	___wmul@multiplicand,w
  3786  0EB6  07F4               	addwf	___wmul@product,f
  3787  0EB7  1803               	skipnc
  3788  0EB8  0AF5               	incf	___wmul@product+1,f
  3789  0EB9  0873               	movf	___wmul@multiplicand+1,w
  3790  0EBA  07F5               	addwf	___wmul@product+1,f
  3791  0EBB                     l324:
  3792  0EBB  3001               	movlw	1
  3793  0EBC                     u1025:
  3794  0EBC  1003               	clrc
  3795  0EBD  0DF2               	rlf	___wmul@multiplicand,f
  3796  0EBE  0DF3               	rlf	___wmul@multiplicand+1,f
  3797  0EBF  3EFF               	addlw	-1
  3798  0EC0  1D03               	skipz
  3799  0EC1  2EBC               	goto	u1025
  3800  0EC2                     l1600:
  3801  0EC2  3001               	movlw	1
  3802  0EC3                     u1035:
  3803  0EC3  1003               	clrc
  3804  0EC4  0CF1               	rrf	___wmul@multiplier+1,f
  3805  0EC5  0CF0               	rrf	___wmul@multiplier,f
  3806  0EC6  3EFF               	addlw	-1
  3807  0EC7  1D03               	skipz
  3808  0EC8  2EC3               	goto	u1035
  3809  0EC9                     l1602:
  3810  0EC9  0870               	movf	___wmul@multiplier,w
  3811  0ECA  0471               	iorwf	___wmul@multiplier+1,w
  3812  0ECB  1D03               	btfss	3,2
  3813  0ECC  2ECE               	goto	u1041
  3814  0ECD  2ECF               	goto	u1040
  3815  0ECE                     u1041:
  3816  0ECE  2EB1               	goto	l1596
  3817  0ECF                     u1040:
  3818  0ECF                     l1604:
  3819  0ECF  0875               	movf	___wmul@product+1,w
  3820  0ED0  00F1               	movwf	?___wmul+1
  3821  0ED1  0874               	movf	___wmul@product,w
  3822  0ED2  00F0               	movwf	?___wmul
  3823  0ED3                     l326:
  3824  0ED3  0008               	return
  3825  0ED4                     __end_of___wmul:
  3826                           
  3827                           	psect	text18
  3828  0262                     __ptext18:	
  3829 ;; *************** function _sensor *****************
  3830 ;; Defined at:
  3831 ;;		line 186 in file "main.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  chanel          2    0[COMMON] int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  2    0[COMMON] int 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3845 ;;      Params:         2       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0
  3848 ;;      Totals:         2       0       0       0       0
  3849 ;;Total ram usage:        2 bytes
  3850 ;; Hardware stack levels used: 1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_checkXML
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _sensor
  3861  0262                     _sensor:
  3862  0262                     l1684:	
  3863                           ;incstack = 0
  3864                           ; Regs used in _sensor: [wreg-fsr0h+status,2+status,0]
  3865                           
  3866                           
  3867                           ;main.c: 187:     ADCON1 = 0x80;
  3868  0262  3080               	movlw	128
  3869  0263  1683               	bsf	3,5	;RP0=1, select bank1
  3870  0264  1303               	bcf	3,6	;RP1=0, select bank1
  3871  0265  009F               	movwf	31	;volatile
  3872                           
  3873                           ;main.c: 189:     switch (chanel) {
  3874  0266  2A8F               	goto	l1704
  3875  0267                     l1686:
  3876  0267  3081               	movlw	129
  3877  0268  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0269  1303               	bcf	3,6	;RP1=0, select bank0
  3879  026A  009F               	movwf	31	;volatile
  3880                           
  3881                           ;main.c: 191:             break;
  3882  026B  2AAE               	goto	l144
  3883  026C                     l1688:
  3884  026C  3089               	movlw	137
  3885  026D  1283               	bcf	3,5	;RP0=0, select bank0
  3886  026E  1303               	bcf	3,6	;RP1=0, select bank0
  3887  026F  009F               	movwf	31	;volatile
  3888                           
  3889                           ;main.c: 193:             break;
  3890  0270  2AAE               	goto	l144
  3891  0271                     l1690:
  3892  0271  3091               	movlw	145
  3893  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0274  009F               	movwf	31	;volatile
  3896                           
  3897                           ;main.c: 195:             break;
  3898  0275  2AAE               	goto	l144
  3899  0276                     l1692:
  3900  0276  3099               	movlw	153
  3901  0277  1283               	bcf	3,5	;RP0=0, select bank0
  3902  0278  1303               	bcf	3,6	;RP1=0, select bank0
  3903  0279  009F               	movwf	31	;volatile
  3904                           
  3905                           ;main.c: 197:             break;
  3906  027A  2AAE               	goto	l144
  3907  027B                     l1694:
  3908  027B  30A1               	movlw	161
  3909  027C  1283               	bcf	3,5	;RP0=0, select bank0
  3910  027D  1303               	bcf	3,6	;RP1=0, select bank0
  3911  027E  009F               	movwf	31	;volatile
  3912                           
  3913                           ;main.c: 199:             break;
  3914  027F  2AAE               	goto	l144
  3915  0280                     l1696:
  3916  0280  30A9               	movlw	169
  3917  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3918  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3919  0283  009F               	movwf	31	;volatile
  3920                           
  3921                           ;main.c: 201:             break;
  3922  0284  2AAE               	goto	l144
  3923  0285                     l1698:
  3924  0285  30B1               	movlw	177
  3925  0286  1283               	bcf	3,5	;RP0=0, select bank0
  3926  0287  1303               	bcf	3,6	;RP1=0, select bank0
  3927  0288  009F               	movwf	31	;volatile
  3928                           
  3929                           ;main.c: 203:             break;
  3930  0289  2AAE               	goto	l144
  3931  028A                     l1700:
  3932  028A  30B9               	movlw	185
  3933  028B  1283               	bcf	3,5	;RP0=0, select bank0
  3934  028C  1303               	bcf	3,6	;RP1=0, select bank0
  3935  028D  009F               	movwf	31	;volatile
  3936                           
  3937                           ;main.c: 205:             break;
  3938  028E  2AAE               	goto	l144
  3939  028F                     l1704:
  3940                           
  3941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3942                           ; Switch size 1, requested type "simple"
  3943                           ; Number of cases is 1, Range of values is 0 to 0
  3944                           ; switch strategies available:
  3945                           ; Name         Instructions Cycles
  3946                           ; simple_byte            4     3 (average)
  3947                           ; direct_byte           11     8 (fixed)
  3948                           ; jumptable            260     6 (fixed)
  3949                           ;	Chosen strategy is simple_byte
  3950  028F  0871               	movf	sensor@chanel+1,w
  3951  0290  3A00               	xorlw	0	; case 0
  3952  0291  1903               	skipnz
  3953  0292  2A94               	goto	l2066
  3954  0293  2AAE               	goto	l144
  3955  0294                     l2066:
  3956                           
  3957                           ; Switch size 1, requested type "simple"
  3958                           ; Number of cases is 8, Range of values is 0 to 7
  3959                           ; switch strategies available:
  3960                           ; Name         Instructions Cycles
  3961                           ; simple_byte           25    13 (average)
  3962                           ; direct_byte           32     8 (fixed)
  3963                           ; jumptable            260     6 (fixed)
  3964                           ;	Chosen strategy is simple_byte
  3965  0294  0870               	movf	sensor@chanel,w
  3966  0295  3A00               	xorlw	0	; case 0
  3967  0296  1903               	skipnz
  3968  0297  2A67               	goto	l1686
  3969  0298  3A01               	xorlw	1	; case 1
  3970  0299  1903               	skipnz
  3971  029A  2A6C               	goto	l1688
  3972  029B  3A03               	xorlw	3	; case 2
  3973  029C  1903               	skipnz
  3974  029D  2A71               	goto	l1690
  3975  029E  3A01               	xorlw	1	; case 3
  3976  029F  1903               	skipnz
  3977  02A0  2A76               	goto	l1692
  3978  02A1  3A07               	xorlw	7	; case 4
  3979  02A2  1903               	skipnz
  3980  02A3  2A7B               	goto	l1694
  3981  02A4  3A01               	xorlw	1	; case 5
  3982  02A5  1903               	skipnz
  3983  02A6  2A80               	goto	l1696
  3984  02A7  3A03               	xorlw	3	; case 6
  3985  02A8  1903               	skipnz
  3986  02A9  2A85               	goto	l1698
  3987  02AA  3A01               	xorlw	1	; case 7
  3988  02AB  1903               	skipnz
  3989  02AC  2A8A               	goto	l1700
  3990  02AD  2AAE               	goto	l144
  3991  02AE                     l144:
  3992                           
  3993                           ;main.c: 208:     ADCON0bits.GO = 1;
  3994  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3995  02AF  151F               	bsf	31,2	;volatile
  3996  02B0                     l152:	
  3997                           ;main.c: 209:     while (GO);
  3998                           
  3999  02B0  191F               	btfsc	31,2	;volatile
  4000  02B1  2AB3               	goto	u1131
  4001  02B2  2AB4               	goto	u1130
  4002  02B3                     u1131:
  4003  02B3  2AB0               	goto	l152
  4004  02B4                     u1130:
  4005  02B4                     l1706:
  4006                           
  4007                           ;main.c: 210:     return ((ADRESH << 8) + ADRESL);
  4008  02B4  081E               	movf	30,w	;volatile
  4009  02B5  00F1               	movwf	?_sensor+1
  4010  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  4011  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  4012  02B8  081E               	movf	30,w	;volatile
  4013  02B9  00F0               	movwf	?_sensor
  4014  02BA                     l155:
  4015  02BA  0008               	return
  4016  02BB                     __end_of_sensor:
  4017                           
  4018                           	psect	text19
  4019  0E53                     __ptext19:	
  4020 ;; *************** function _mostraTemp *****************
  4021 ;; Defined at:
  4022 ;;		line 179 in file "main.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  valTemp         2   15[BANK0 ] int 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  valString      20   18[BANK0 ] unsigned char [20]
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4036 ;;      Params:         0       2       0       0       0
  4037 ;;      Locals:         0      20       0       0       0
  4038 ;;      Temps:          0       1       0       0       0
  4039 ;;      Totals:         0      23       0       0       0
  4040 ;;Total ram usage:       23 bytes
  4041 ;; Hardware stack levels used: 1
  4042 ;; Hardware stack levels required when called: 2
  4043 ;; This function calls:
  4044 ;;		_enviar
  4045 ;;		_sprintf
  4046 ;; This function is called by:
  4047 ;;		_checkXML
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _mostraTemp
  4053  0E53                     _mostraTemp:
  4054  0E53                     l1682:	
  4055                           ;incstack = 0
  4056                           ; Regs used in _mostraTemp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4057                           
  4058                           
  4059                           ;main.c: 180:     char valString[20];;main.c: 182:     sprintf(valString, "<val>\n\tTemp
      +                          :%d\n</val>\n", valTemp);
  4060  0E53  302B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  4061  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  4062  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  4063  0E56  00B1               	movwf	??_mostraTemp
  4064  0E57  0831               	movf	??_mostraTemp,w
  4065  0E58  00A0               	movwf	sprintf@f
  4066  0E59  0830               	movf	mostraTemp@valTemp+1,w
  4067  0E5A  00A2               	movwf	?_sprintf+2
  4068  0E5B  082F               	movf	mostraTemp@valTemp,w
  4069  0E5C  00A1               	movwf	?_sprintf+1
  4070  0E5D  3032               	movlw	(low (mostraTemp@valString| 0))& (0+255)
  4071  0E5E  120A  118A  23E9  120A  158A  	fcall	_sprintf
  4072                           
  4073                           ;main.c: 183:     enviar(valString);
  4074  0E63  3032               	movlw	(low (mostraTemp@valString| 0))& (0+255)
  4075  0E64  00F1               	movwf	enviar@msg
  4076  0E65  3000               	movlw	0
  4077  0E66  00F2               	movwf	enviar@msg+1
  4078  0E67  120A  158A  277A  120A  158A  	fcall	_enviar
  4079  0E6C                     l139:
  4080  0E6C  0008               	return
  4081  0E6D                     __end_of_mostraTemp:
  4082                           
  4083                           	psect	text20
  4084  0E6D                     __ptext20:	
  4085 ;; *************** function _mostraSensores *****************
  4086 ;; Defined at:
  4087 ;;		line 168 in file "main.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  valLeft         2   15[BANK0 ] int 
  4090 ;;  valRight        2   17[BANK0 ] int 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  valString      20   20[BANK0 ] unsigned char [20]
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4102 ;;      Params:         0       4       0       0       0
  4103 ;;      Locals:         0      20       0       0       0
  4104 ;;      Temps:          0       1       0       0       0
  4105 ;;      Totals:         0      25       0       0       0
  4106 ;;Total ram usage:       25 bytes
  4107 ;; Hardware stack levels used: 1
  4108 ;; Hardware stack levels required when called: 2
  4109 ;; This function calls:
  4110 ;;		_enviar
  4111 ;;		_sprintf
  4112 ;; This function is called by:
  4113 ;;		_checkXML
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _mostraSensores
  4119  0E6D                     _mostraSensores:
  4120  0E6D                     l1678:	
  4121                           ;incstack = 0
  4122                           ; Regs used in _mostraSensores: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4123                           
  4124                           
  4125                           ;main.c: 169:     char valString[20];;main.c: 171:     sprintf(valString, "<val>\n\tLeft
      +                          :%d Right:%d\n</val>\n", valLeft, valRight);
  4126  0E6D  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4127  0E6E  1283               	bcf	3,5	;RP0=0, select bank0
  4128  0E6F  1303               	bcf	3,6	;RP1=0, select bank0
  4129  0E70  00B3               	movwf	??_mostraSensores
  4130  0E71  0833               	movf	??_mostraSensores,w
  4131  0E72  00A0               	movwf	sprintf@f
  4132  0E73  0830               	movf	mostraSensores@valLeft+1,w
  4133  0E74  00A2               	movwf	?_sprintf+2
  4134  0E75  082F               	movf	mostraSensores@valLeft,w
  4135  0E76  00A1               	movwf	?_sprintf+1
  4136  0E77  0832               	movf	mostraSensores@valRight+1,w
  4137  0E78  00A4               	movwf	?_sprintf+4
  4138  0E79  0831               	movf	mostraSensores@valRight,w
  4139  0E7A  00A3               	movwf	?_sprintf+3
  4140  0E7B  3034               	movlw	(low (mostraSensores@valString| 0))& (0+255)
  4141  0E7C  120A  118A  23E9  120A  158A  	fcall	_sprintf
  4142                           
  4143                           ;main.c: 172:     enviar(valString);
  4144  0E81  3034               	movlw	(low (mostraSensores@valString| 0))& (0+255)
  4145  0E82  00F1               	movwf	enviar@msg
  4146  0E83  3000               	movlw	0
  4147  0E84  00F2               	movwf	enviar@msg+1
  4148  0E85  120A  158A  277A  120A  158A  	fcall	_enviar
  4149  0E8A                     l133:
  4150  0E8A  0008               	return
  4151  0E8B                     __end_of_mostraSensores:
  4152                           
  4153                           	psect	text21
  4154  03E9                     __ptext21:	
  4155 ;; *************** function _sprintf *****************
  4156 ;; Defined at:
  4157 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  sp              1    wreg     PTR unsigned char 
  4160 ;;		 -> mostraTemp@valString(20), mostraSensores@valString(20), 
  4161 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4162 ;;		 -> STR_6(23), STR_4(32), 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  4165 ;;		 -> mostraTemp@valString(20), mostraSensores@valString(20), 
  4166 ;;  tmpval          4    0        struct .
  4167 ;;  val             2   11[BANK0 ] unsigned int 
  4168 ;;  cp              2    0        PTR const unsigned char 
  4169 ;;  len             2    0        unsigned int 
  4170 ;;  c               1   14[BANK0 ] unsigned char 
  4171 ;;  prec            1   10[BANK0 ] char 
  4172 ;;  flag            1    9[BANK0 ] unsigned char 
  4173 ;;  ap              1    8[BANK0 ] PTR void [1]
  4174 ;;		 -> ?_sprintf(2), 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    0[BANK0 ] int 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4184 ;;      Params:         0       5       0       0       0
  4185 ;;      Locals:         0       7       0       0       0
  4186 ;;      Temps:          0       3       0       0       0
  4187 ;;      Totals:         0      15       0       0       0
  4188 ;;Total ram usage:       15 bytes
  4189 ;; Hardware stack levels used: 1
  4190 ;; Hardware stack levels required when called: 1
  4191 ;; This function calls:
  4192 ;;		___lwdiv
  4193 ;;		___lwmod
  4194 ;; This function is called by:
  4195 ;;		_mostraSensores
  4196 ;;		_mostraTemp
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _sprintf
  4202  03E9                     _sprintf:
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4206                           ;sprintf@sp stored from wreg
  4207  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  4208  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  4209  03EB  00AD               	movwf	sprintf@sp
  4210  03EC                     l1532:
  4211                           
  4212                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  4213  03EC  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4214  03ED  00A5               	movwf	??_sprintf
  4215  03EE  0825               	movf	??_sprintf,w
  4216  03EF  00A8               	movwf	sprintf@ap
  4217                           
  4218                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4219  03F0  2CBA               	goto	l1584
  4220  03F1                     l1534:
  4221                           
  4222                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4223  03F1  3025               	movlw	37
  4224  03F2  062E               	xorwf	sprintf@c,w
  4225  03F3  1903               	btfsc	3,2
  4226  03F4  2BF6               	goto	u941
  4227  03F5  2BF7               	goto	u940
  4228  03F6                     u941:
  4229  03F6  2C03               	goto	l1540
  4230  03F7                     u940:
  4231  03F7                     l1536:
  4232                           
  4233                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4234  03F7  082E               	movf	sprintf@c,w
  4235  03F8  00A5               	movwf	??_sprintf
  4236  03F9  082D               	movf	sprintf@sp,w
  4237  03FA  0084               	movwf	4
  4238  03FB  0825               	movf	??_sprintf,w
  4239  03FC  1383               	bcf	3,7	;select IRP bank0
  4240  03FD  0080               	movwf	0
  4241  03FE                     l1538:
  4242  03FE  3001               	movlw	1
  4243  03FF  00A5               	movwf	??_sprintf
  4244  0400  0825               	movf	??_sprintf,w
  4245  0401  07AD               	addwf	sprintf@sp,f
  4246                           
  4247                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  4248  0402  2CBA               	goto	l1584
  4249  0403                     l1540:
  4250                           
  4251                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4252  0403  01A9               	clrf	sprintf@flag
  4253  0404                     l1544:	
  4254                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  4255                           
  4256  0404  3001               	movlw	1
  4257  0405  07A0               	addwf	sprintf@f,f
  4258  0406  30FF               	movlw	-1
  4259  0407  0720               	addwf	sprintf@f,w
  4260  0408  0084               	movwf	4
  4261  0409  120A  118A  200D  120A  118A  	fcall	stringdir
  4262  040E  00AE               	movwf	sprintf@c
  4263  040F  00A5               	movwf	??_sprintf
  4264  0410  01A6               	clrf	??_sprintf+1
  4265                           
  4266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4267                           ; Switch size 1, requested type "simple"
  4268                           ; Number of cases is 1, Range of values is 0 to 0
  4269                           ; switch strategies available:
  4270                           ; Name         Instructions Cycles
  4271                           ; simple_byte            4     3 (average)
  4272                           ; direct_byte           11     8 (fixed)
  4273                           ; jumptable            260     6 (fixed)
  4274                           ;	Chosen strategy is simple_byte
  4275  0411  0826               	movf	??_sprintf+1,w
  4276  0412  3A00               	xorlw	0	; case 0
  4277  0413  1903               	skipnz
  4278  0414  2C16               	goto	l2068
  4279  0415  2CBA               	goto	l1584
  4280  0416                     l2068:
  4281                           
  4282                           ; Switch size 1, requested type "simple"
  4283                           ; Number of cases is 3, Range of values is 0 to 105
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte           10     6 (average)
  4287                           ; jumptable            260     6 (fixed)
  4288                           ;	Chosen strategy is simple_byte
  4289  0416  0825               	movf	??_sprintf,w
  4290  0417  3A00               	xorlw	0	; case 0
  4291  0418  1903               	skipnz
  4292  0419  2CCC               	goto	l1586
  4293  041A  3A64               	xorlw	100	; case 100
  4294  041B  1903               	skipnz
  4295  041C  2C21               	goto	l1546
  4296  041D  3A0D               	xorlw	13	; case 105
  4297  041E  1903               	skipnz
  4298  041F  2C21               	goto	l1546
  4299  0420  2CBA               	goto	l1584
  4300  0421                     l1546:
  4301                           
  4302                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4303  0421  0828               	movf	sprintf@ap,w
  4304  0422  0084               	movwf	4
  4305  0423  1383               	bcf	3,7	;select IRP bank0
  4306  0424  0800               	movf	0,w
  4307  0425  00AB               	movwf	sprintf@val
  4308  0426  0A84               	incf	4,f
  4309  0427  0800               	movf	0,w
  4310  0428  00AC               	movwf	sprintf@val+1
  4311  0429                     l1548:
  4312  0429  3002               	movlw	2
  4313  042A  00A5               	movwf	??_sprintf
  4314  042B  0825               	movf	??_sprintf,w
  4315  042C  07A8               	addwf	sprintf@ap,f
  4316  042D                     l1550:
  4317                           
  4318                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4319  042D  1FAC               	btfss	sprintf@val+1,7
  4320  042E  2C30               	goto	u951
  4321  042F  2C31               	goto	u950
  4322  0430                     u951:
  4323  0430  2C3A               	goto	l1556
  4324  0431                     u950:
  4325  0431                     l1552:
  4326                           
  4327                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4328  0431  3003               	movlw	3
  4329  0432  00A5               	movwf	??_sprintf
  4330  0433  0825               	movf	??_sprintf,w
  4331  0434  04A9               	iorwf	sprintf@flag,f
  4332  0435                     l1554:
  4333                           
  4334                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4335  0435  09AB               	comf	sprintf@val,f
  4336  0436  09AC               	comf	sprintf@val+1,f
  4337  0437  0AAB               	incf	sprintf@val,f
  4338  0438  1903               	skipnz
  4339  0439  0AAC               	incf	sprintf@val+1,f
  4340  043A                     l1556:
  4341                           
  4342                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  4343  043A  01AE               	clrf	sprintf@c
  4344  043B  0AAE               	incf	sprintf@c,f
  4345  043C                     l1562:
  4346                           
  4347                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4348  043C  082E               	movf	sprintf@c,w
  4349  043D  00A5               	movwf	??_sprintf
  4350  043E  0725               	addwf	??_sprintf,w
  4351  043F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4352  0440  0084               	movwf	4
  4353  0441  120A  118A  200D  120A  118A  	fcall	stringdir
  4354  0446  00A6               	movwf	??_sprintf+1
  4355  0447  120A  118A  200D  120A  118A  	fcall	stringdir
  4356  044C  00A7               	movwf	??_sprintf+2
  4357  044D  0827               	movf	??_sprintf+2,w
  4358  044E  022C               	subwf	sprintf@val+1,w
  4359  044F  1D03               	skipz
  4360  0450  2C53               	goto	u965
  4361  0451  0826               	movf	??_sprintf+1,w
  4362  0452  022B               	subwf	sprintf@val,w
  4363  0453                     u965:
  4364  0453  1803               	skipnc
  4365  0454  2C56               	goto	u961
  4366  0455  2C57               	goto	u960
  4367  0456                     u961:
  4368  0456  2C58               	goto	l1566
  4369  0457                     u960:
  4370  0457  2C62               	goto	l1568
  4371  0458                     l1566:
  4372  0458  3001               	movlw	1
  4373  0459  00A5               	movwf	??_sprintf
  4374  045A  0825               	movf	??_sprintf,w
  4375  045B  07AE               	addwf	sprintf@c,f
  4376  045C  3005               	movlw	5
  4377  045D  062E               	xorwf	sprintf@c,w
  4378  045E  1D03               	btfss	3,2
  4379  045F  2C61               	goto	u971
  4380  0460  2C62               	goto	u970
  4381  0461                     u971:
  4382  0461  2C3C               	goto	l1562
  4383  0462                     u970:
  4384  0462                     l1568:
  4385                           
  4386                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4387  0462  0829               	movf	sprintf@flag,w
  4388  0463  3903               	andlw	3
  4389  0464  1903               	btfsc	3,2
  4390  0465  2C67               	goto	u981
  4391  0466  2C68               	goto	u980
  4392  0467                     u981:
  4393  0467  2C73               	goto	l1574
  4394  0468                     u980:
  4395  0468                     l1570:
  4396                           
  4397                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4398  0468  302D               	movlw	45
  4399  0469  00A5               	movwf	??_sprintf
  4400  046A  082D               	movf	sprintf@sp,w
  4401  046B  0084               	movwf	4
  4402  046C  0825               	movf	??_sprintf,w
  4403  046D  1383               	bcf	3,7	;select IRP bank0
  4404  046E  0080               	movwf	0
  4405  046F                     l1572:
  4406  046F  3001               	movlw	1
  4407  0470  00A5               	movwf	??_sprintf
  4408  0471  0825               	movf	??_sprintf,w
  4409  0472  07AD               	addwf	sprintf@sp,f
  4410  0473                     l1574:
  4411                           
  4412                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4413  0473  082E               	movf	sprintf@c,w
  4414  0474  00A5               	movwf	??_sprintf
  4415  0475  0825               	movf	??_sprintf,w
  4416  0476  00AA               	movwf	sprintf@prec
  4417                           
  4418                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4419  0477  2CB1               	goto	l1582
  4420  0478                     l1576:
  4421                           
  4422                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4423  0478  300A               	movlw	10
  4424  0479  00F8               	movwf	___lwmod@divisor
  4425  047A  3000               	movlw	0
  4426  047B  00F9               	movwf	___lwmod@divisor+1
  4427  047C  082A               	movf	sprintf@prec,w
  4428  047D  00A5               	movwf	??_sprintf
  4429  047E  0725               	addwf	??_sprintf,w
  4430  047F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4431  0480  0084               	movwf	4
  4432  0481  120A  118A  200D  120A  118A  	fcall	stringdir
  4433  0486  00F0               	movwf	___lwdiv@divisor
  4434  0487  120A  118A  200D  120A  118A  	fcall	stringdir
  4435  048C  00F1               	movwf	___lwdiv@divisor+1
  4436  048D  082C               	movf	sprintf@val+1,w
  4437  048E  00F3               	movwf	___lwdiv@dividend+1
  4438  048F  082B               	movf	sprintf@val,w
  4439  0490  00F2               	movwf	___lwdiv@dividend
  4440  0491  120A  158A  27BC  120A  118A  	fcall	___lwdiv
  4441  0496  0871               	movf	?___lwdiv+1,w
  4442  0497  00FB               	movwf	___lwmod@dividend+1
  4443  0498  0870               	movf	?___lwdiv,w
  4444  0499  00FA               	movwf	___lwmod@dividend
  4445  049A  120A  158A  2740  120A  118A  	fcall	___lwmod
  4446  049F  0878               	movf	?___lwmod,w
  4447  04A0  3E30               	addlw	48
  4448  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  4449  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  4450  04A3  00A6               	movwf	??_sprintf+1
  4451  04A4  0826               	movf	??_sprintf+1,w
  4452  04A5  00AE               	movwf	sprintf@c
  4453  04A6                     l1578:
  4454                           
  4455                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4456  04A6  082E               	movf	sprintf@c,w
  4457  04A7  00A5               	movwf	??_sprintf
  4458  04A8  082D               	movf	sprintf@sp,w
  4459  04A9  0084               	movwf	4
  4460  04AA  0825               	movf	??_sprintf,w
  4461  04AB  1383               	bcf	3,7	;select IRP bank0
  4462  04AC  0080               	movwf	0
  4463  04AD                     l1580:
  4464  04AD  3001               	movlw	1
  4465  04AE  00A5               	movwf	??_sprintf
  4466  04AF  0825               	movf	??_sprintf,w
  4467  04B0  07AD               	addwf	sprintf@sp,f
  4468  04B1                     l1582:
  4469                           
  4470                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4471  04B1  30FF               	movlw	255
  4472  04B2  00A5               	movwf	??_sprintf
  4473  04B3  0825               	movf	??_sprintf,w
  4474  04B4  07AA               	addwf	sprintf@prec,f
  4475  04B5  0A2A               	incf	sprintf@prec,w
  4476  04B6  1D03               	btfss	3,2
  4477  04B7  2CB9               	goto	u991
  4478  04B8  2CBA               	goto	u990
  4479  04B9                     u991:
  4480  04B9  2C78               	goto	l1576
  4481  04BA                     u990:
  4482  04BA                     l1584:
  4483                           
  4484                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4485  04BA  3001               	movlw	1
  4486  04BB  07A0               	addwf	sprintf@f,f
  4487  04BC  30FF               	movlw	-1
  4488  04BD  0720               	addwf	sprintf@f,w
  4489  04BE  0084               	movwf	4
  4490  04BF  120A  118A  200D  120A  118A  	fcall	stringdir
  4491  04C4  00A5               	movwf	??_sprintf
  4492  04C5  0825               	movf	??_sprintf,w
  4493  04C6  00AE               	movwf	sprintf@c
  4494  04C7  082E               	movf	sprintf@c,w
  4495  04C8  1D03               	btfss	3,2
  4496  04C9  2CCB               	goto	u1001
  4497  04CA  2CCC               	goto	u1000
  4498  04CB                     u1001:
  4499  04CB  2BF1               	goto	l1534
  4500  04CC                     u1000:
  4501  04CC                     l1586:
  4502                           
  4503                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4504  04CC  082D               	movf	sprintf@sp,w
  4505  04CD  0084               	movwf	4
  4506  04CE  1383               	bcf	3,7	;select IRP bank0
  4507  04CF  0180               	clrf	0
  4508  04D0                     l320:
  4509  04D0  0008               	return
  4510  04D1                     __end_of_sprintf:
  4511                           
  4512                           	psect	text22
  4513  0F40                     __ptext22:	
  4514 ;; *************** function ___lwmod *****************
  4515 ;; Defined at:
  4516 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  divisor         2    8[COMMON] unsigned int 
  4519 ;;  dividend        2   10[COMMON] unsigned int 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  counter         1   13[COMMON] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2    8[COMMON] unsigned int 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4531 ;;      Params:         4       0       0       0       0
  4532 ;;      Locals:         1       0       0       0       0
  4533 ;;      Temps:          1       0       0       0       0
  4534 ;;      Totals:         6       0       0       0       0
  4535 ;;Total ram usage:        6 bytes
  4536 ;; Hardware stack levels used: 1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_sprintf
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function ___lwmod
  4546  0F40                     ___lwmod:
  4547  0F40                     l1492:	
  4548                           ;incstack = 0
  4549                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4550                           
  4551  0F40  0878               	movf	___lwmod@divisor,w
  4552  0F41  0479               	iorwf	___lwmod@divisor+1,w
  4553  0F42  1903               	btfsc	3,2
  4554  0F43  2F45               	goto	u841
  4555  0F44  2F46               	goto	u840
  4556  0F45                     u841:
  4557  0F45  2F75               	goto	l1510
  4558  0F46                     u840:
  4559  0F46                     l1494:
  4560  0F46  01FD               	clrf	___lwmod@counter
  4561  0F47  0AFD               	incf	___lwmod@counter,f
  4562  0F48  2F54               	goto	l1500
  4563  0F49                     l1496:
  4564  0F49  3001               	movlw	1
  4565  0F4A                     u855:
  4566  0F4A  1003               	clrc
  4567  0F4B  0DF8               	rlf	___lwmod@divisor,f
  4568  0F4C  0DF9               	rlf	___lwmod@divisor+1,f
  4569  0F4D  3EFF               	addlw	-1
  4570  0F4E  1D03               	skipz
  4571  0F4F  2F4A               	goto	u855
  4572  0F50                     l1498:
  4573  0F50  3001               	movlw	1
  4574  0F51  00FC               	movwf	??___lwmod
  4575  0F52  087C               	movf	??___lwmod,w
  4576  0F53  07FD               	addwf	___lwmod@counter,f
  4577  0F54                     l1500:
  4578  0F54  1FF9               	btfss	___lwmod@divisor+1,7
  4579  0F55  2F57               	goto	u861
  4580  0F56  2F58               	goto	u860
  4581  0F57                     u861:
  4582  0F57  2F49               	goto	l1496
  4583  0F58                     u860:
  4584  0F58                     l1502:
  4585  0F58  0879               	movf	___lwmod@divisor+1,w
  4586  0F59  027B               	subwf	___lwmod@dividend+1,w
  4587  0F5A  1D03               	skipz
  4588  0F5B  2F5E               	goto	u875
  4589  0F5C  0878               	movf	___lwmod@divisor,w
  4590  0F5D  027A               	subwf	___lwmod@dividend,w
  4591  0F5E                     u875:
  4592  0F5E  1C03               	skipc
  4593  0F5F  2F61               	goto	u871
  4594  0F60  2F62               	goto	u870
  4595  0F61                     u871:
  4596  0F61  2F68               	goto	l1506
  4597  0F62                     u870:
  4598  0F62                     l1504:
  4599  0F62  0878               	movf	___lwmod@divisor,w
  4600  0F63  02FA               	subwf	___lwmod@dividend,f
  4601  0F64  0879               	movf	___lwmod@divisor+1,w
  4602  0F65  1C03               	skipc
  4603  0F66  03FB               	decf	___lwmod@dividend+1,f
  4604  0F67  02FB               	subwf	___lwmod@dividend+1,f
  4605  0F68                     l1506:
  4606  0F68  3001               	movlw	1
  4607  0F69                     u885:
  4608  0F69  1003               	clrc
  4609  0F6A  0CF9               	rrf	___lwmod@divisor+1,f
  4610  0F6B  0CF8               	rrf	___lwmod@divisor,f
  4611  0F6C  3EFF               	addlw	-1
  4612  0F6D  1D03               	skipz
  4613  0F6E  2F69               	goto	u885
  4614  0F6F                     l1508:
  4615  0F6F  3001               	movlw	1
  4616  0F70  02FD               	subwf	___lwmod@counter,f
  4617  0F71  1D03               	btfss	3,2
  4618  0F72  2F74               	goto	u891
  4619  0F73  2F75               	goto	u890
  4620  0F74                     u891:
  4621  0F74  2F58               	goto	l1502
  4622  0F75                     u890:
  4623  0F75                     l1510:
  4624  0F75  087B               	movf	___lwmod@dividend+1,w
  4625  0F76  00F9               	movwf	?___lwmod+1
  4626  0F77  087A               	movf	___lwmod@dividend,w
  4627  0F78  00F8               	movwf	?___lwmod
  4628  0F79                     l606:
  4629  0F79  0008               	return
  4630  0F7A                     __end_of___lwmod:
  4631                           
  4632                           	psect	text23
  4633  0FBC                     __ptext23:	
  4634 ;; *************** function ___lwdiv *****************
  4635 ;; Defined at:
  4636 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  divisor         2    0[COMMON] unsigned int 
  4639 ;;  dividend        2    2[COMMON] unsigned int 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  quotient        2    5[COMMON] unsigned int 
  4642 ;;  counter         1    7[COMMON] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  2    0[COMMON] unsigned int 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         4       0       0       0       0
  4653 ;;      Locals:         3       0       0       0       0
  4654 ;;      Temps:          1       0       0       0       0
  4655 ;;      Totals:         8       0       0       0       0
  4656 ;;Total ram usage:        8 bytes
  4657 ;; Hardware stack levels used: 1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_sprintf
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function ___lwdiv
  4667  0FBC                     ___lwdiv:
  4668  0FBC                     l1466:	
  4669                           ;incstack = 0
  4670                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4671                           
  4672  0FBC  01F5               	clrf	___lwdiv@quotient
  4673  0FBD  01F6               	clrf	___lwdiv@quotient+1
  4674  0FBE                     l1468:
  4675  0FBE  0870               	movf	___lwdiv@divisor,w
  4676  0FBF  0471               	iorwf	___lwdiv@divisor+1,w
  4677  0FC0  1903               	btfsc	3,2
  4678  0FC1  2FC3               	goto	u771
  4679  0FC2  2FC4               	goto	u770
  4680  0FC3                     u771:
  4681  0FC3  2FFB               	goto	l1488
  4682  0FC4                     u770:
  4683  0FC4                     l1470:
  4684  0FC4  01F7               	clrf	___lwdiv@counter
  4685  0FC5  0AF7               	incf	___lwdiv@counter,f
  4686  0FC6  2FD2               	goto	l1476
  4687  0FC7                     l1472:
  4688  0FC7  3001               	movlw	1
  4689  0FC8                     u785:
  4690  0FC8  1003               	clrc
  4691  0FC9  0DF0               	rlf	___lwdiv@divisor,f
  4692  0FCA  0DF1               	rlf	___lwdiv@divisor+1,f
  4693  0FCB  3EFF               	addlw	-1
  4694  0FCC  1D03               	skipz
  4695  0FCD  2FC8               	goto	u785
  4696  0FCE                     l1474:
  4697  0FCE  3001               	movlw	1
  4698  0FCF  00F4               	movwf	??___lwdiv
  4699  0FD0  0874               	movf	??___lwdiv,w
  4700  0FD1  07F7               	addwf	___lwdiv@counter,f
  4701  0FD2                     l1476:
  4702  0FD2  1FF1               	btfss	___lwdiv@divisor+1,7
  4703  0FD3  2FD5               	goto	u791
  4704  0FD4  2FD6               	goto	u790
  4705  0FD5                     u791:
  4706  0FD5  2FC7               	goto	l1472
  4707  0FD6                     u790:
  4708  0FD6                     l1478:
  4709  0FD6  3001               	movlw	1
  4710  0FD7                     u805:
  4711  0FD7  1003               	clrc
  4712  0FD8  0DF5               	rlf	___lwdiv@quotient,f
  4713  0FD9  0DF6               	rlf	___lwdiv@quotient+1,f
  4714  0FDA  3EFF               	addlw	-1
  4715  0FDB  1D03               	skipz
  4716  0FDC  2FD7               	goto	u805
  4717  0FDD  0871               	movf	___lwdiv@divisor+1,w
  4718  0FDE  0273               	subwf	___lwdiv@dividend+1,w
  4719  0FDF  1D03               	skipz
  4720  0FE0  2FE3               	goto	u815
  4721  0FE1  0870               	movf	___lwdiv@divisor,w
  4722  0FE2  0272               	subwf	___lwdiv@dividend,w
  4723  0FE3                     u815:
  4724  0FE3  1C03               	skipc
  4725  0FE4  2FE6               	goto	u811
  4726  0FE5  2FE7               	goto	u810
  4727  0FE6                     u811:
  4728  0FE6  2FEE               	goto	l1484
  4729  0FE7                     u810:
  4730  0FE7                     l1480:
  4731  0FE7  0870               	movf	___lwdiv@divisor,w
  4732  0FE8  02F2               	subwf	___lwdiv@dividend,f
  4733  0FE9  0871               	movf	___lwdiv@divisor+1,w
  4734  0FEA  1C03               	skipc
  4735  0FEB  03F3               	decf	___lwdiv@dividend+1,f
  4736  0FEC  02F3               	subwf	___lwdiv@dividend+1,f
  4737  0FED                     l1482:
  4738  0FED  1475               	bsf	___lwdiv@quotient,0
  4739  0FEE                     l1484:
  4740  0FEE  3001               	movlw	1
  4741  0FEF                     u825:
  4742  0FEF  1003               	clrc
  4743  0FF0  0CF1               	rrf	___lwdiv@divisor+1,f
  4744  0FF1  0CF0               	rrf	___lwdiv@divisor,f
  4745  0FF2  3EFF               	addlw	-1
  4746  0FF3  1D03               	skipz
  4747  0FF4  2FEF               	goto	u825
  4748  0FF5                     l1486:
  4749  0FF5  3001               	movlw	1
  4750  0FF6  02F7               	subwf	___lwdiv@counter,f
  4751  0FF7  1D03               	btfss	3,2
  4752  0FF8  2FFA               	goto	u831
  4753  0FF9  2FFB               	goto	u830
  4754  0FFA                     u831:
  4755  0FFA  2FD6               	goto	l1478
  4756  0FFB                     u830:
  4757  0FFB                     l1488:
  4758  0FFB  0876               	movf	___lwdiv@quotient+1,w
  4759  0FFC  00F1               	movwf	?___lwdiv+1
  4760  0FFD  0875               	movf	___lwdiv@quotient,w
  4761  0FFE  00F0               	movwf	?___lwdiv
  4762  0FFF                     l596:
  4763  0FFF  0008               	return
  4764  1000                     __end_of___lwdiv:
  4765                           
  4766                           	psect	text24
  4767  0E19                     __ptext24:	
  4768 ;; *************** function _enviarAck *****************
  4769 ;; Defined at:
  4770 ;;		line 175 in file "main.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4784 ;;      Params:         0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0
  4787 ;;      Totals:         0       0       0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; Hardware stack levels required when called: 2
  4791 ;; This function calls:
  4792 ;;		_enviar
  4793 ;; This function is called by:
  4794 ;;		_checkXML
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _enviarAck
  4800  0E19                     _enviarAck:
  4801  0E19                     l1680:	
  4802                           ;incstack = 0
  4803                           ; Regs used in _enviarAck: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4804                           
  4805                           
  4806                           ;main.c: 176:     enviar("<ack>\n</ack>\n");
  4807  0E19  30B0               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  4808  0E1A  00F1               	movwf	enviar@msg
  4809  0E1B  3080               	movlw	128
  4810  0E1C  00F2               	movwf	enviar@msg+1
  4811  0E1D  120A  158A  277A  120A  158A  	fcall	_enviar
  4812  0E22                     l136:
  4813  0E22  0008               	return
  4814  0E23                     __end_of_enviarAck:
  4815                           
  4816                           	psect	text25
  4817  0F7A                     __ptext25:	
  4818 ;; *************** function _enviar *****************
  4819 ;; Defined at:
  4820 ;;		line 34 in file "main.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  msg             2    1[COMMON] PTR unsigned char 
  4823 ;;		 -> STR_18(23), STR_17(23), STR_16(23), STR_14(23), 
  4824 ;;		 -> mostraTemp@valString(20), STR_5(14), mostraSensores@valString(20), STR_3(20), 
  4825 ;;		 -> STR_2(21), STR_1(23), 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  i               2    6[COMMON] int 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         2       0       0       0       0
  4838 ;;      Locals:         2       0       0       0       0
  4839 ;;      Temps:          3       0       0       0       0
  4840 ;;      Totals:         7       0       0       0       0
  4841 ;;Total ram usage:        7 bytes
  4842 ;; Hardware stack levels used: 1
  4843 ;; Hardware stack levels required when called: 1
  4844 ;; This function calls:
  4845 ;;		_enviar_caracter
  4846 ;; This function is called by:
  4847 ;;		_sendMotorState
  4848 ;;		_mostraSensores
  4849 ;;		_enviarAck
  4850 ;;		_mostraTemp
  4851 ;;		_checkXML
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _enviar
  4857  0F7A                     _enviar:
  4858  0F7A                     l1514:	
  4859                           ;incstack = 0
  4860                           ; Regs used in _enviar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4861                           
  4862                           
  4863                           ;main.c: 35:     int i = 0;
  4864  0F7A  01F6               	clrf	enviar@i
  4865  0F7B  01F7               	clrf	enviar@i+1
  4866                           
  4867                           ;main.c: 36:     while (msg[i] != '\0') {
  4868  0F7C  2F9F               	goto	l1520
  4869  0F7D                     l1516:
  4870                           
  4871                           ;main.c: 37:         enviar_caracter(msg[i]);
  4872  0F7D  0876               	movf	enviar@i,w
  4873  0F7E  0771               	addwf	enviar@msg,w
  4874  0F7F  00F4               	movwf	??_enviar+1
  4875  0F80  0872               	movf	enviar@msg+1,w
  4876  0F81  00F3               	movwf	??_enviar
  4877  0F82  1803               	skipnc
  4878  0F83  0AF3               	incf	??_enviar,f
  4879  0F84  1FF6               	btfss	enviar@i,7
  4880  0F85  2F87               	goto	u900
  4881  0F86  03F3               	decf	??_enviar,f
  4882  0F87                     u900:
  4883  0F87  0873               	movf	??_enviar,w
  4884  0F88  00F5               	movwf	??_enviar+2
  4885  0F89  0875               	movf	??_enviar+2,w
  4886  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  4887  0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  4888  0F8C  00FF               	movwf	btemp+1
  4889  0F8D  0874               	movf	??_enviar+1,w
  4890  0F8E  0084               	movwf	4
  4891  0F8F  120A  118A  2003  120A  158A  	fcall	stringtab
  4892  0F94  120A  158A  260F  120A  158A  	fcall	_enviar_caracter
  4893  0F99                     l1518:
  4894                           
  4895                           ;main.c: 38:         i++;
  4896  0F99  3001               	movlw	1
  4897  0F9A  07F6               	addwf	enviar@i,f
  4898  0F9B  1803               	skipnc
  4899  0F9C  0AF7               	incf	enviar@i+1,f
  4900  0F9D  3000               	movlw	0
  4901  0F9E  07F7               	addwf	enviar@i+1,f
  4902  0F9F                     l1520:
  4903                           
  4904                           ;main.c: 36:     while (msg[i] != '\0') {
  4905  0F9F  0876               	movf	enviar@i,w
  4906  0FA0  0771               	addwf	enviar@msg,w
  4907  0FA1  00F4               	movwf	??_enviar+1
  4908  0FA2  0872               	movf	enviar@msg+1,w
  4909  0FA3  00F3               	movwf	??_enviar
  4910  0FA4  1803               	skipnc
  4911  0FA5  0AF3               	incf	??_enviar,f
  4912  0FA6  1FF6               	btfss	enviar@i,7
  4913  0FA7  2FA9               	goto	u910
  4914  0FA8  03F3               	decf	??_enviar,f
  4915  0FA9                     u910:
  4916  0FA9  0873               	movf	??_enviar,w
  4917  0FAA  00F5               	movwf	??_enviar+2
  4918  0FAB  0875               	movf	??_enviar+2,w
  4919  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  4920  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  4921  0FAE  00FF               	movwf	btemp+1
  4922  0FAF  0874               	movf	??_enviar+1,w
  4923  0FB0  0084               	movwf	4
  4924  0FB1  120A  118A  2003  120A  158A  	fcall	stringtab
  4925  0FB6  3A00               	xorlw	0
  4926  0FB7  1D03               	skipz
  4927  0FB8  2FBA               	goto	u921
  4928  0FB9  2FBB               	goto	u920
  4929  0FBA                     u921:
  4930  0FBA  2F7D               	goto	l1516
  4931  0FBB                     u920:
  4932  0FBB                     l63:
  4933  0FBB  0008               	return
  4934  0FBC                     __end_of_enviar:
  4935                           
  4936                           	psect	text26
  4937  0E0F                     __ptext26:	
  4938 ;; *************** function _enviar_caracter *****************
  4939 ;; Defined at:
  4940 ;;		line 29 in file "main.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  c               1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  c               1    0[COMMON] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      void 
  4947 ;; Registers used:
  4948 ;;		wreg
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4954 ;;      Params:         0       0       0       0       0
  4955 ;;      Locals:         1       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0
  4957 ;;      Totals:         1       0       0       0       0
  4958 ;;Total ram usage:        1 bytes
  4959 ;; Hardware stack levels used: 1
  4960 ;; This function calls:
  4961 ;;		Nothing
  4962 ;; This function is called by:
  4963 ;;		_enviar
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           
  4968                           ;psect for function _enviar_caracter
  4969  0E0F                     _enviar_caracter:
  4970                           
  4971                           ;incstack = 0
  4972                           ; Regs used in _enviar_caracter: [wreg]
  4973                           ;enviar_caracter@c stored from wreg
  4974  0E0F  00F0               	movwf	enviar_caracter@c
  4975  0E10                     l1464:
  4976                           
  4977                           ;main.c: 30:     TXREG = c;
  4978  0E10  0870               	movf	enviar_caracter@c,w
  4979  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  4980  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  4981  0E13  0099               	movwf	25	;volatile
  4982  0E14                     l54:	
  4983                           ;main.c: 31:     while (TXIF == 0);
  4984                           
  4985  0E14  1E0C               	btfss	12,4	;volatile
  4986  0E15  2E17               	goto	u761
  4987  0E16  2E18               	goto	u760
  4988  0E17                     u761:
  4989  0E17  2E14               	goto	l54
  4990  0E18                     u760:
  4991  0E18                     l57:
  4992  0E18  0008               	return
  4993  0E19                     __end_of_enviar_caracter:
  4994                           
  4995                           	psect	text27
  4996  0171                     __ptext27:	
  4997 ;; *************** function _botao *****************
  4998 ;; Defined at:
  4999 ;;		line 42 in file "main.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  mode            1    wreg     PTR int 
  5002 ;;		 -> main@mode(2), 
  5003 ;;  lastValidBut    1    0[COMMON] PTR int 
  5004 ;;		 -> main@lastValidButtonState(2), 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;  mode            1    6[COMMON] PTR int 
  5007 ;;		 -> main@mode(2), 
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      void 
  5010 ;; Registers used:
  5011 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5017 ;;      Params:         1       0       0       0       0
  5018 ;;      Locals:         1       0       0       0       0
  5019 ;;      Temps:          5       0       0       0       0
  5020 ;;      Totals:         7       0       0       0       0
  5021 ;;Total ram usage:        7 bytes
  5022 ;; Hardware stack levels used: 1
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		_main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _botao
  5032  0171                     _botao:
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _botao: [wreg-fsr0h+status,2+status,0]
  5036                           ;botao@mode stored from wreg
  5037  0171  00F6               	movwf	botao@mode
  5038  0172                     l1744:
  5039                           
  5040                           ;main.c: 43:     if (PORTBbits.RB3 != *lastValidButtonState) {
  5041  0172  0870               	movf	botao@lastValidButtonState,w
  5042  0173  0084               	movwf	4
  5043  0174  1383               	bcf	3,7	;select IRP bank0
  5044  0175  0800               	movf	0,w
  5045  0176  00F1               	movwf	??_botao
  5046  0177  0A84               	incf	4,f
  5047  0178  0800               	movf	0,w
  5048  0179  00F2               	movwf	??_botao+1
  5049  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5050  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5051  017C  0C06               	rrf	6,w	;volatile
  5052  017D  00F3               	movwf	??_botao+2
  5053  017E  0CF3               	rrf	??_botao+2,f
  5054  017F  0C73               	rrf	??_botao+2,w
  5055  0180  3901               	andlw	1
  5056  0181  00F4               	movwf	??_botao+3
  5057  0182  01F5               	clrf	??_botao+4
  5058  0183  0872               	movf	??_botao+1,w
  5059  0184  0675               	xorwf	??_botao+4,w
  5060  0185  1D03               	skipz
  5061  0186  2989               	goto	u1175
  5062  0187  0871               	movf	??_botao,w
  5063  0188  0674               	xorwf	??_botao+3,w
  5064  0189                     u1175:
  5065  0189  1903               	skipnz
  5066  018A  298C               	goto	u1171
  5067  018B  298D               	goto	u1170
  5068  018C                     u1171:
  5069  018C  29B9               	goto	l70
  5070  018D                     u1170:
  5071  018D                     l1746:
  5072                           
  5073                           ;main.c: 44:         *lastValidButtonState = PORTBbits.RB3;
  5074  018D  0C06               	rrf	6,w	;volatile
  5075  018E  00F1               	movwf	??_botao
  5076  018F  0CF1               	rrf	??_botao,f
  5077  0190  0C71               	rrf	??_botao,w
  5078  0191  3901               	andlw	1
  5079  0192  00F2               	movwf	??_botao+1
  5080  0193  01F3               	clrf	??_botao+2
  5081  0194  0870               	movf	botao@lastValidButtonState,w
  5082  0195  0084               	movwf	4
  5083  0196  0872               	movf	??_botao+1,w
  5084  0197  0080               	movwf	0
  5085  0198  0A84               	incf	4,f
  5086  0199  0873               	movf	??_botao+2,w
  5087  019A  0080               	movwf	0
  5088  019B                     l1748:
  5089                           
  5090                           ;main.c: 45:         if (!PORTBbits.RB3) {
  5091  019B  1986               	btfsc	6,3	;volatile
  5092  019C  299E               	goto	u1181
  5093  019D  299F               	goto	u1180
  5094  019E                     u1181:
  5095  019E  29B9               	goto	l70
  5096  019F                     u1180:
  5097  019F                     l1750:
  5098                           
  5099                           ;main.c: 46:             if (*mode) {
  5100  019F  0876               	movf	botao@mode,w
  5101  01A0  0084               	movwf	4
  5102  01A1  0800               	movf	0,w
  5103  01A2  00F1               	movwf	??_botao
  5104  01A3  0A84               	incf	4,f
  5105  01A4  0800               	movf	0,w
  5106  01A5  00F2               	movwf	??_botao+1
  5107  01A6  0871               	movf	??_botao,w
  5108  01A7  0472               	iorwf	??_botao+1,w
  5109  01A8  1903               	btfsc	3,2
  5110  01A9  29AB               	goto	u1191
  5111  01AA  29AC               	goto	u1190
  5112  01AB                     u1191:
  5113  01AB  29B2               	goto	l1754
  5114  01AC                     u1190:
  5115  01AC                     l1752:
  5116                           
  5117                           ;main.c: 47:                 *mode = 0;
  5118  01AC  0876               	movf	botao@mode,w
  5119  01AD  0084               	movwf	4
  5120  01AE  0180               	clrf	0
  5121  01AF  0A84               	incf	4,f
  5122  01B0  0180               	clrf	0
  5123                           
  5124                           ;main.c: 48:             } else {
  5125  01B1  29B9               	goto	l70
  5126  01B2                     l1754:
  5127                           
  5128                           ;main.c: 49:                 *mode = 1;
  5129  01B2  0876               	movf	botao@mode,w
  5130  01B3  0084               	movwf	4
  5131  01B4  3001               	movlw	1
  5132  01B5  0080               	movwf	0
  5133  01B6  0A84               	incf	4,f
  5134  01B7  3000               	movlw	0
  5135  01B8  0080               	movwf	0
  5136  01B9                     l70:
  5137  01B9  0008               	return
  5138  01BA                     __end_of_botao:
  5139  007E                     btemp	set	126	;btemp
  5140  007E                     wtemp0	set	126
  5141                           
  5142                           	psect	config
  5143                           
  5144                           ;Config register CONFIG @ 0x2007
  5145                           ;	Oscillator Selection bits
  5146                           ;	FOSC = HS, HS oscillator
  5147                           ;	Watchdog Timer Enable bit
  5148                           ;	WDTE = OFF, WDT disabled
  5149                           ;	Power-up Timer Enable bit
  5150                           ;	PWRTE = OFF, PWRT disabled
  5151                           ;	Brown-out Reset Enable bit
  5152                           ;	BOREN = OFF, BOR disabled
  5153                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  5154                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  5155                           ;	Data EEPROM Memory Code Protection bit
  5156                           ;	CPD = OFF, Data EEPROM code protection off
  5157                           ;	Flash Program Memory Write Enable bits
  5158                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  5159                           ;	In-Circuit Debugger Mode bit
  5160                           ;	DEBUG = 0x1, unprogrammed default
  5161                           ;	Flash Program Memory Code Protection bit
  5162                           ;	CP = OFF, Code protection off
  5163  2007                     	org	8199
  5164  2007  3F3A               	dw	16186

Data Sizes:
    Strings     224
    Constant    10
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      59
    BANK1            80     62      62
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_15(CODE[3]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_15(CODE[3]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), 

    strstr@s1	PTR const unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 40
		 -> main@msg(BANK1[40]), STR_15(CODE[3]), STR_13(CODE[6]), STR_12(CODE[6]), 
		 -> STR_11(CODE[6]), STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), 
		 -> STR_7(CODE[6]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 40
		 -> main@msg(BANK1[40]), STR_15(CODE[3]), STR_13(CODE[6]), STR_12(CODE[6]), 
		 -> STR_11(CODE[6]), STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), 
		 -> STR_7(CODE[6]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 32
		 -> STR_6(CODE[23]), STR_4(CODE[32]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> mostraTemp@valString(BANK0[20]), mostraSensores@valString(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    checkXML@temperature	PTR int  size(1) Largest target is 2
		 -> main@temperature(BANK1[2]), 

    checkXML@monitorizacao	PTR int  size(1) Largest target is 2
		 -> main@monitorizacao(BANK1[2]), 

    checkXML@mode	PTR int  size(1) Largest target is 2
		 -> main@mode(BANK1[2]), 

    checkXML@night	PTR int  size(1) Largest target is 2
		 -> main@night(BANK1[2]), 

    checkXML@valTemp	PTR int  size(1) Largest target is 2
		 -> main@valTemp(BANK1[2]), 

    checkXML@limit	PTR int  size(1) Largest target is 2
		 -> main@limit(BANK1[2]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), NULL(NULL[0]), 

    checkXML@msg	PTR unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), 

    checkXML@op	PTR int  size(1) Largest target is 2
		 -> main@op(BANK1[2]), 

    stringToInt@string	PTR unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), 

    standbyMode@motorState	PTR int  size(1) Largest target is 2
		 -> main@motorState(BANK1[2]), 

    normalMode@motorState	PTR int  size(1) Largest target is 2
		 -> main@motorState(BANK1[2]), 

    receber_msg@output	PTR unsigned char  size(1) Largest target is 40
		 -> main@msg(BANK1[40]), 

    debouncer@t	PTR int  size(1) Largest target is 2
		 -> main@t(BANK1[2]), 

    debouncer@lastButtonState	PTR int  size(1) Largest target is 2
		 -> main@lastButtonState(BANK1[2]), 

    botao@mode	PTR int  size(1) Largest target is 2
		 -> main@mode(BANK1[2]), 

    botao@lastValidButtonState	PTR int  size(1) Largest target is 2
		 -> main@lastValidButtonState(BANK1[2]), 

    enviar@msg	PTR unsigned char  size(2) Largest target is 23
		 -> STR_18(CODE[23]), STR_17(CODE[23]), STR_16(CODE[23]), STR_14(CODE[23]), 
		 -> mostraTemp@valString(BANK0[20]), STR_5(CODE[14]), mostraSensores@valString(BANK0[20]), STR_3(CODE[20]), 
		 -> STR_2(CODE[21]), STR_1(CODE[23]), 


Critical Paths under _main in COMMON

    _main->_standbyMode
    _standbyMode->_sendMotorState
    _receber_msg->_receber_caracter
    _normalMode->_sendMotorState
    _sendMotorState->_enviar
    _checkXML->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _stringToInt->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _enviarAck->_enviar
    _enviar->_enviar_caracter

Critical Paths under _main in BANK0

    _main->_checkXML
    _checkXML->_mostraSensores
    _mostraTemp->_sprintf
    _mostraSensores->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                69    69      0   17311
                                             52 BANK0      7     7      0
                                              0 BANK1     62    62      0
                              _botao
                           _checkXML
                          _debouncer
                         _normalMode
                        _receber_msg
                             _sensor
                        _setup_USART
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                          5     3      2    1873
                                             12 COMMON     2     0      2
                                              0 BANK0      3     3      0
                          _motorStop
                     _sendMotorState
 ---------------------------------------------------------------------------------
 (1) _setup_USART                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _receber_msg                                          7     7      0     214
                                              2 COMMON     7     7      0
                   _receber_caracter
 ---------------------------------------------------------------------------------
 (2) _receber_caracter                                     2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _normalMode                                          14     3     11    2704
                                              0 BANK0     14     3     11
                          _motorLeft
                         _motorRight
                          _motorStop
                     _sendMotorState
                             _sensor (ARG)
 ---------------------------------------------------------------------------------
 (2) _sendMotorState                                       4     0      4    1676
                                              8 COMMON     4     0      4
                             _enviar
 ---------------------------------------------------------------------------------
 (2) _motorStop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motorRight                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motorLeft                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _debouncer                                            8     6      2     263
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (1) _checkXML                                            12     5      7   10983
                                             40 BANK0     12     5      7
                             _enviar
                          _enviarAck
                     _mostraSensores
                         _mostraTemp
                             _sensor
                        _stringToInt
                             _strstr
 ---------------------------------------------------------------------------------
 (2) _strstr                                               5     4      1    1807
                                             10 COMMON     4     3      1
                                              0 BANK0      1     1      0
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              6     3      3     319
                                              4 COMMON     6     3      3
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (3) _strchr                                               3     1      2     197
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _stringToInt                                         10     8      2     655
                                              6 COMMON     5     3      2
                                              0 BANK0      5     5      0
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               4     2      2     242
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sensor                                               2     0      2     478
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _mostraTemp                                          23    21      2    2344
                                             15 BANK0     23    21      2
                             _enviar
                             _sensor (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _mostraSensores                                      25    21      4    2442
                                             15 BANK0     25    21      4
                             _enviar
                             _sensor (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             23    18      5    1320
                                              0 BANK0     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _enviarAck                                            0     0      0     872
                             _enviar
 ---------------------------------------------------------------------------------
 (3) _enviar                                               7     5      2     872
                                              1 COMMON     7     5      2
                    _enviar_caracter
 ---------------------------------------------------------------------------------
 (4) _enviar_caracter                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _botao                                                7     6      1     219
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _botao
   _checkXML
     _enviar
       _enviar_caracter
     _enviarAck
       _enviar
     _mostraSensores
       _enviar
       _sensor (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _mostraTemp
       _enviar
       _sensor (ARG)
       _sprintf (ARG)
     _sensor
     _stringToInt
       ___wmul
       _strlen
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _debouncer
   _normalMode
     _motorLeft
     _motorRight
     _motorStop
     _sendMotorState
       _enviar
     _sensor (ARG)
   _receber_msg
     _receber_caracter
   _sensor
   _setup_USART
   _standbyMode
     _motorStop
     _sendMotorState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      AF       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      3B       5       73.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3E      3E       7       77.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      28       9       41.7%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      AF      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon May 24 15:45:49 2021

                _standbyMode 00FD        receber_caracter@carac 0071                            pc 0002  
                         l51 0E3B                           l70 01B9                           l54 0E14  
                         l63 0FBB                           l57 0E18                           l74 02F3  
                         l82 0E2E                           l76 031B                           l92 0E00  
                         l95 0DFA                           l79 0E23                           l89 0F3F  
                         _GO 00FA                           l98 0E06                           fsr 0004  
        ___wmul@multiplicand 0072             ??_mostraSensores 0033                          l120 03E8  
                        l130 0261                          l107 0F09                          l124 012A  
                        l133 0E8A                          l206 0594                          l136 0E22  
                        l320 04D0                          l152 02B0                          l144 02AE  
                        l139 0E6C                          l155 02BA                          l324 0EBB  
                        l326 0ED3                          l194 07F2                          l606 0F79  
                        l802 0160                          l807 0170                          l596 0FFF  
                        l790 020C                          l778 0EAE                          l796 0E3D  
                        l798 0E52                          u810 0FE7                          u811 0FE6  
                        u900 0F87                          u805 0FD7                          u910 0FA9  
                        u830 0FFB                          u831 0FFA                          u815 0FE3  
                        u760 0E18                          u920 0FBB                          u840 0F46  
                        u761 0E17                          u921 0FBA                          u825 0FEF  
                        u841 0F45                          u770 0FC4                          u930 0EA6  
                        u771 0FC3                          u931 0EA5                          u860 0F58  
                        u940 03F7                          u861 0F57                          u941 03F6  
                        u790 0FD6                          u870 0F62                          u950 0431  
                        u791 0FD5                          u871 0F61                          u855 0F4A  
                        u951 0430                          u960 0457                          u785 0FC8  
                        u961 0456                          u890 0F75                          u970 0462  
                        u891 0F74                          u875 0F5E                          u971 0461  
                        u980 0468                          u885 0F69                          u981 0467  
                        u965 0453                          u990 04BA                          u991 04B9  
                        fsr0 0004                          indf 0000                         l1500 0F54  
                       l1502 0F58                         l1510 0F75                         l2062 0EFE  
                       l1520 0F9F                         l1504 0F62                         l1600 0EC2  
                       l2064 07C9                         l1514 0F7A                         l1506 0F68  
                       l2066 0294                         l1602 0EC9                         l1522 0E8B  
                       l1610 012D                         l1516 0F7D                         l1508 0F6F  
                       l2068 0416                         l1540 0403                         l1532 03EC  
                       l1700 028A                         l1604 0ECF                         l1524 0E90  
                       l1620 016E                         l1612 0135                         l1518 0F99  
                       l1470 0FC4                         l1550 042D                         l1534 03F1  
                       l1526 0E96                         l1630 0E48                         l1614 0145  
                       l1464 0E10                         l1480 0FE7                         l1472 0FC7  
                       l1552 0431                         l1544 0404                         l1536 03F7  
                       l1704 028F                         l1528 0EA6                         l1632 0E51  
                       l1624 0E3D                         l1608 012C                         l1800 0367  
                       l1482 0FED                         l1474 0FCE                         l1466 0FBC  
                       l1570 0468                         l1562 043C                         l1554 0435  
                       l1546 0421                         l1538 03FE                         l1706 02B4  
                       l1626 0E46                         l1618 0158                         l1722 01E3  
                       l1714 01BD                         l1642 0DFB                         l1802 037F  
                       l1810 039C                         l1484 0FEE                         l1476 0FD2  
                       l1468 0FBE                         l1492 0F40                         l1580 04AD  
                       l1572 046F                         l1556 043A                         l1548 0429  
                       l1716 01BE                         l1724 01FE                         l1900 0747  
                       l1644 0DF5                         l1652 0EDB                         l1660 0EF9  
                       l1812 03B4                         l1820 03D2                         l1804 0384  
                       l1636 0E23                         l1740 0E38                         l1732 0E2F  
                       l1750 019F                         l1486 0FF5                         l1478 0FD6  
                       l1494 0F46                         l1582 04B1                         l1574 0473  
                       l1566 0458                         l1670 023A                         l1726 0203  
                       l1718 01DF                         l1910 075F                         l1902 074D  
                       l1646 0E01                         l1654 0EE5                         l1822 03D7  
                       l1814 03B9                         l1806 0394                         l1638 0E29  
                       l1742 0E39                         l1734 0E32                         l1830 0105  
                       l1752 01AC                         l1744 0172                         l1680 0E19  
                       l1488 0FFB                         l1496 0F49                         l1576 0478  
                       l1568 0462                         l1584 04BA                         l1672 0240  
                       l1728 020B                         l1920 07B0                         l1912 0764  
                       l1840 0606                         l1760 02EE                         l1656 0EEF  
                       l1648 0ED4                         l1816 03CA                         l1736 0E33  
                       l1832 0115                         l1754 01B2                         l1746 018D  
                       l1498 0F50                         l1578 04A6                         l1586 04CC  
                       l1682 0E53                         l1690 0271                         l1594 0EAF  
                       l1674 025D                         l1666 0210                         l1914 0787  
                       l1906 0755                         l1922 07BA                         l1850 0649  
                       l1842 0611                         l1762 030F                         l1738 0E37  
                       l1834 011A                         l1930 04D1                         l1748 019B  
                       l1692 0276                         l1684 0262                         l1596 0EB1  
                       l1668 0215                         l1924 07E0                         l1860 0692  
                       l1852 065A                         l1844 0622                         l1836 05E9  
                       l1764 0314                         l1756 02BC                         l1780 0F2B  
                       l1772 0F0B                         l1828 0100                         l1940 04EA  
                       l1932 04D8                         l1678 0E6D                         l1694 027B  
                       l1686 0267                         l1598 0EB5                         l1918 079C  
                       l1862 069D                         l1854 0665                         l1846 062D  
                       l1838 05F7                         l1870 06CB                         l1758 02D7  
                       l1790 032C                         l1782 0F2D                         l1774 0F0D  
                       l1950 04FA                         l1942 04EC                         l1934 04D9  
                       l1696 0280                         l1688 026C                         l1864 06AE  
                       l1856 0676                         l1848 063E                         l1768 0319  
                       l1792 033C                         l1784 0F33                         l1776 0F12  
                       l1960 0509                         l1952 04FE                         l1944 04EE  
                       l1936 04E2                         l1698 0285                         l1890 0722  
                       l1882 0708                         l1874 06DB                         l1866 06B9  
                       l1858 0681                         l1794 0341                         l1778 0F20  
                       l1786 0F39                         l1970 055D                         l1962 050F  
                       l1954 0500                         l1946 04F2                         l1938 04E6  
                       l1892 0728                         l1884 070F                         l1876 06EE  
                       l1868 06C1                         l1796 0351                         l1788 031C  
                       l1980 0598                         l1972 056F                         l1964 0515  
                       l1956 0502                         l1948 04F6                         l1894 0731  
                       l1886 0715                         l1878 06F4                         l1798 0356  
                       l1974 057B                         l1966 0539                         l1958 0504  
                       l1896 073A                         l1888 071B                         l1976 0583  
                       l1968 0556                         l1898 0741                         l1978 0587  
                       STR_1 0082                         STR_2 0099                         STR_3 00AE  
                       STR_4 001D                         STR_5 00C2                         STR_6 003D  
                       STR_7 00D6                         STR_8 00E2                         STR_9 00D0  
                       u1000 04CC                         u1001 04CB                         u1010 0EB5  
                       u1011 0EB4                         u1100 0E29                         u1101 0E28  
                       u1110 0EDA                         u1111 0ED9                         u1040 0ECF  
                       u1120 025D                         u1200 02D7                         u1041 0ECE  
                       u1025 0EBC                         u1121 025C                         u1201 02D6  
                       u1130 02B4                         u1050 0135                         u1210 030F  
                       u1131 02B3                         u1035 0EC3                         u1051 0134  
                       u1211 030E                         u1060 0145                         u1140 01DF  
                       u1300 03CA                         u1220 0F2B                         u1125 0259  
                       u1061 0144                         u1141 01DE                         u1205 02D3  
                       u1301 03C9                         u1221 0F2A                         u1070 016E  
                       u1150 0203                         u1310 03E7                         u1230 0F3F  
                       u1071 016D                         u1151 0202                         u1311 03E6  
                       u1231 0F3E                         u1080 0E46                         u1160 020B  
                       u1400 06AE                         u1240 032C                         u1320 0115  
                       u1081 0E45                         u1161 020A                         u1401 06AD  
                       u1241 032B                         u1321 0114                         u1170 018D  
                       u1090 0E51                         u1410 06DA                         u1330 05F7  
                       u1250 033C                         u1171 018C                         u1091 0E50  
                       u1411 06D9                         u1331 05F6                         u1251 033B  
                       u1180 019F                         u1420 0715                         u1340 0606  
                       u1260 0351                         u1500 0583                         u1181 019E  
                       u1421 0714                         u1341 0605                         u1261 0350  
                       u1245 0328                         u1501 0582                         u1190 01AC  
                       u1430 071B                         u1350 0622                         u1270 037F  
                       u1191 01AB                         u1175 0189                         u1431 071A  
                       u1351 0621                         u1271 037E                         u1255 0338  
                       u1440 0747                         u1360 063E                         u1280 0394  
                       u1441 0746                         u1361 063D                         u1281 0393  
                       u1450 074D                         u1370 065A                         u1290 03B4  
                       u1451 074C                         u1371 0659                         u1291 03B3  
                       u1275 037B                         u1380 0676                         u1460 04DD  
                       u1381 0675                         u1390 0692                         u1470 050F  
                       u1391 0691                         u1295 03B0                         u1471 050E  
                       u1480 0556                         u1481 0555                         u1490 056F  
                       u1491 056E                         u1485 0552                         _RCIF 0065  
                       _TXIF 0064                  main@valTemp 00D2                         _main 04D1  
                       btemp 007E                         start 0000                  _stringToInt 020D  
        checkXML@temperature 004C                        ?_main 0070                        STR_10 00E8  
                      STR_11 00DC                        STR_12 00EE                        STR_13 00F4  
                      STR_14 0054                        STR_15 00FA                        STR_16 006B  
                      STR_17 006B                        STR_18 0054              __end_of___lwdiv 1000  
            __end_of___lwmod 0F7A                        _RCREG 001A                        _RCSTA 0018  
           _receber_caracter 0E23                        _SPBRG 0099  sendMotorState@monitorizacao 007A  
                      _TRISC 0087                        _TXREG 0019                        _TXSTA 0098  
                      _botao 0171              __end_of_dpowers 001D              normalMode@limit 0026  
            normalMode@night 0024                        main@t 00D4              normalMode@right 0022  
                      pclath 000A                 ?_receber_msg 0070                        status 0003  
                      wtemp0 007E              __end_of_sprintf 04D1              __end_of_strncmp 0171  
            __initialization 07F3                 __end_of_main 05E6            stringToInt@result 0022  
          stringToInt@string 0024                       ??_main 0054               _sendMotorState 0ED4  
              checkXML@limit 0048                checkXML@night 0049                checkXML@teste 0051  
                     ?_botao 0070                       _ADCON0 001F                       _ADCON1 009F  
                     _ADRESH 001E                       _ADRESL 009E        checkXML@monitorizacao 004B  
           __end_of_checkXML 07F3                       ___wmul 0EAF                    ??___lwdiv 0074  
                  ??___lwmod 007C                       _enviar 0F7A       __end_of_sendMotorState 0F0A  
                     _sensor 0262                       main@op 00DC                       _strchr 0E3C  
                     _strlen 0E8B                       _strstr 01BA                 ?_setup_USART 0070  
                  ??_sprintf 0025                    ??_strncmp 0077      __end_of__initialization 07FC  
   standbyMode@monitorizacao 007C                 ?_standbyMode 007C               __pcstackCOMMON 0070  
              __end_of_botao 01BA              ?_sendMotorState 0078           __size_of_debouncer 0061  
      standbyMode@motorState 0022     __size_of_enviar_caracter 000A                      ??_botao 0071  
                 __pbssBANK3 0190           __size_of_enviarAck 000A         __size_of_receber_msg 0036  
   __end_of_receber_caracter 0E2F                   __pmaintext 04D1                 ?_stringToInt 0076  
                    ?___wmul 0070      normalMode@monitorizacao 0029                      ?_enviar 0071  
                    ?_sensor 0070                      ?_strchr 0070           __size_of_motorLeft 0006  
                    ?_strlen 0070                      ?_strstr 007A           __size_of_motorStop 0006  
                  ?_checkXML 0048                   __stringtab 0003            __end_of_debouncer 031C  
     mostraSensores@valRight 0031                   checkXML@op 004E              __size_of___wmul 0025  
                    ___lwdiv 0FBC                      ___lwmod 0F40                 stringToInt@i 0020  
            __size_of_enviar 0042            __end_of_enviarAck 0E23                      __ptext1 00FD  
                    __ptext2 0E2F                      __ptext3 0F0A                      __ptext4 0E23  
                    __ptext5 031C                      __ptext6 0ED4                      __ptext7 0E01  
                    __ptext8 0DFB                      __ptext9 0DF5              __size_of_sensor 0059  
            __size_of_strchr 0017              __size_of_strlen 0024              __size_of_strstr 0053  
                    _dpowers 0013                   ??_checkXML 004F                   debouncer@t 0070  
                    _sprintf 03E9                      main@msg 00A0                      clrloop0 0E08  
             main@motorState 00DA      __size_of_mostraSensores 001E                      _strncmp 012B  
       end_of_initialization 07FC         __size_of_setup_USART 000D            main@monitorizacao 00D6  
                    enviar@i 0076            ??_enviar_caracter 0070            __end_of_motorLeft 0DFB  
          __end_of_motorStop 0E07            mostraTemp@valTemp 002F                   _normalMode 031C  
                  _RCSTAbits 0018                   _motorRight 0DFB         __size_of_standbyMode 002E  
                 _mostraTemp 0E53     debouncer@lastButtonState 0077                      strlen@s 0070  
                  _PORTBbits 0006                    _PORTCbits 0007                    _PORTDbits 0008  
  botao@lastValidButtonState 0070                    _TRISBbits 0086                    _TRISDbits 0088  
                  _TXSTAbits 0098                 receber_msg@i 0076                 receber_msg@x 0074  
           ??_sendMotorState 007C         __size_of_stringToInt 0055               __end_of___wmul 0ED4  
             __end_of_enviar 0FBC         normalMode@motorState 0028               normalMode@left 0020  
        main@lastButtonState 00C8               __end_of_sensor 02BB               __end_of_strchr 0E53  
             __end_of_strlen 0EAF               __end_of_strstr 020D          start_initialization 07F3  
   main@lastValidButtonState 00CA                 checkXML@mode 004A            ?_receber_caracter 0070  
                ?_normalMode 0020           ??_receber_caracter 0070                  ?_motorRight 0070  
                   ??___wmul 0074                  ?_mostraTemp 002F                     ??_enviar 0073  
                   ??_sensor 0072                     ??_strchr 0072                     ??_strlen 0072  
                   ??_strstr 007B              checkXML@valTemp 004D                    ___latbits 0002  
              __pcstackBANK0 0020                __pcstackBANK1 00A0            __size_of_checkXML 020D  
             _mostraSensores 0E6D                ??_receber_msg 0072                  sprintf@flag 0029  
                sprintf@prec 002A                    _debouncer 02BB             ___lwdiv@dividend 0072  
                   ?___lwdiv 0070                     ?___lwmod 0078                    __pstrings 0003  
            _enviar_caracter 0E0F        mostraSensores@valLeft 002F                    _enviarAck 0E19  
     __end_of_mostraSensores 0E8B             ___lwdiv@quotient 0075               __size_of_botao 0049  
                   ?_sprintf 0020          __size_of_normalMode 00CD                     ?_strncmp 0074  
        __size_of_motorRight 0006          __size_of_mostraTemp 001A               ___wmul@product 0074  
                  clear_ram0 0E07                   ?_debouncer 0070          __end_of_receber_msg 0F40  
                  _motorLeft 0DF5                    _motorStop 0E01                    main@F1050 0190  
                  botao@mode 0076                   _ADCON0bits 001F                  __stringbase 0012  
          ___wmul@multiplier 0070                    main@limit 00CE                    main@night 00CC  
                 ?_enviarAck 0070              ?_mostraSensores 002F                ??_setup_USART 0070  
                  enviar@msg 0071      mostraSensores@valString 0034                  checkXML@msg 0053  
              ??_standbyMode 0020            receber_msg@output 0078                   ?_motorLeft 0070  
                 ?_motorStop 0070      __end_of_enviar_caracter 0E19             __size_of___lwdiv 0044  
           __size_of___lwmod 003A           __end_of__stringtab 0013                     _checkXML 05E6  
                 sprintf@val 002B     sendMotorState@motorState 0078              ___lwdiv@divisor 0070  
            ___lwdiv@counter 0077                     __ptext10 02BB                     __ptext11 05E6  
                   __ptext20 0E6D                     __ptext12 01BA                     __ptext21 03E9  
                   __ptext13 012B                     __ptext22 0F40                     __ptext14 0E3C  
                   __ptext23 0FBC                     __ptext15 020D                     __ptext24 0E19  
                   __ptext16 0E8B                     __ptext25 0F7A                     __ptext17 0EAF  
                   __ptext26 0E0F                     __ptext18 0262                     __ptext27 0171  
                   __ptext19 0E53          mostraTemp@valString 0032             __size_of_sprintf 00E8  
           __size_of_strncmp 0046                  _receber_msg 0F0A          __end_of_setup_USART 0E3C  
              __size_of_main 0115                   strncmp@len 0075                  ??_debouncer 0072  
              ??_stringToInt 0078                 ??_normalMode 002B                 ??_motorRight 0070  
               ??_mostraTemp 0031                     main@mode 00D8          __end_of_standbyMode 012B  
            main@temperature 00D0    __size_of_receber_caracter 000C                  ??_enviarAck 0078  
         __end_of_normalMode 03E9                    sprintf@ap 0028                    sprintf@sp 002D  
         __end_of_motorRight 0E01                    strchr@chr 0070           __end_of_mostraTemp 0E6D  
           ___lwmod@dividend 007A                    strchr@ptr 0072             enviar_caracter@c 0070  
               sensor@chanel 0070                    strncmp@s1 0079                    strncmp@s2 0074  
                  stringcode 000D                  ??_motorLeft 0070                  ??_motorStop 0070  
           ?_enviar_caracter 0070          __end_of_stringToInt 0262                     sprintf@c 002E  
                   sprintf@f 0020      __size_of_sendMotorState 0036              ___lwmod@divisor 0078  
                   strlen@cp 0072              ___lwmod@counter 007D                     stringdir 000D  
                   stringtab 0003                  _setup_USART 0E2F                     strstr@s1 0020  
                   strstr@s2 007A  
